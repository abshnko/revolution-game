[{"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\index.js":"1","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\App.js":"2","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\data.js":"3","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\Question.js":"4","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\announcements.js":"5"},{"size":197,"mtime":1620231532452,"results":"6","hashOfConfig":"7"},{"size":8567,"mtime":1620925159294,"results":"8","hashOfConfig":"7"},{"size":26356,"mtime":1620841087880,"results":"9","hashOfConfig":"7"},{"size":2990,"mtime":1620850621226,"results":"10","hashOfConfig":"7"},{"size":2603,"mtime":1620241663763,"results":"11","hashOfConfig":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tybn36",{"filePath":"15","messages":"16","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"l6ohlv","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\index.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\App.js",["25","26","27","28","29","30","31"],"import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./style.css\";\n// import Question from \"./Question\";\nimport data from \"./data\";\nimport Question from \"./Question\";\nimport { BsQuestion } from \"react-icons/bs\";\nimport { AiOutlineClose } from \"react-icons/ai\";\n\nfunction App() {\n  const [index, setIndex] = useState(1000);\n  const [question, setQuestion] = useState(data);\n  const [questionChanged, setQuestionChanged] = useState(false);\n  const [infoArray, setInfoArray] = useState([]); //write infos here\n  const [isShowInfo, setIsShowInfo] = useState(false);\n  const [questionCounter, setQuestionCounter] = useState(1);\n  const [isJump, setIsJump] = useState(false);\n  const [jump, setJump] = useState(0);\n  const [isShowQuestion, setIsShowQuestion] = useState(true);\n  // console.log(typeof infoArray);\n  // info object:\n  // {title, text, img, isActive}\n\n  const handleClick = () => {\n    if (index !== question[0].id) setQuestionCounter(questionCounter + 1);\n\n    setQuestionChanged(true);\n    setQuestion(data.filter((item) => item.id === index));\n    setQuestionChanged(false);\n  };\n\n  // const checkInfoStatus = () => {\n  //   question[0].isInfo ? setIsInfo(true) : setIsInfo(false);\n  // };\n\n  useEffect(() => {\n    checkOptions();\n    // checkInfos();\n  }, [question]);\n\n  useEffect(() => {\n    checkInfos();\n    checkInfosTest();\n    // console.log(\"info was added, new array:\", infoArray);\n  }, [questionCounter]);\n\n  useEffect(() => {\n    console.log(\"array changed, new length:\", infoArray.length);\n  }, [infoArray]);\n  // useEffect(() => {\n  //   console.log(\"initial array:\", infoArray);\n  //   checkInfos();\n  // }, []);\n\n  const nextClick = (id, isActive, next, nextJump) => {\n    if (nextJump !== 0) {\n      setJump(nextJump);\n      setIsJump(true);\n    }\n    setIndex(next);\n\n    //change active option\n    const i = question[0].options.findIndex((option) => option.id === id);\n    const clone = [...question[0].options];\n    clone[i] = { ...clone[i], isActive: true };\n    const objClone = [...question];\n    objClone[0] = { ...question[0], options: clone };\n    setQuestion(objClone);\n    question[0].options.map((option) => {\n      option.isActive = false;\n    });\n  };\n\n  //check if there's more than one option = it's a question, otherwise =it's an announcement\n  const checkOptions = () => {\n    if (question[0].options.length === 1) {\n      if (isJump) {\n        setIndex(jump);\n        console.log(jump);\n        setIsJump(false);\n      } else {\n        setIndex(question[0].options[0].next);\n      }\n    }\n  };\n\n  const setShowInfoTrue = () => {\n    setIsShowQuestion(false);\n    setIsShowInfo(true);\n  };\n  const setShowQuestionTrue = () => {\n    setIsShowInfo(false);\n    setIsShowQuestion(true);\n  };\n\n  const checkInfos = () => {\n    if (\"info\" in question[0]) {\n      question[0].info.map((singleInfo) => {\n        const newItem = {\n          id: infoArray.length + 1,\n          title: singleInfo,\n          text: singleInfo,\n          img: question[0].img,\n          isActive: false,\n        };\n        setInfoArray([...infoArray, newItem]);\n        console.log(\"info was added, new array:\", infoArray);\n      });\n    }\n  };\n\n  const checkInfosTest = () => {\n    question[0].options.map((option) => {\n      if (\"info\" in option) {\n        option.info.map((singleInfo) => {\n          const newItem = {\n            id: infoArray.length + 1,\n            title: singleInfo,\n            text: singleInfo,\n            img: question[0].img,\n            isActive: false,\n          };\n          setInfoArray((infoArray) => [...infoArray, newItem]);\n        });\n      }\n    });\n  };\n\n  return (\n    <>\n      <div className=\"wrapper\">\n        {questionChanged && <h1>Loading...</h1>}\n\n        {/* CARD W/ INFO */}\n        {isShowInfo && (\n          <>\n            <div className=\"info-container\">\n              <div className=\"info-entries\">\n                {infoArray.map((info) => {\n                  return (\n                    <div className=\"info-single-entry\">\n                      {/* {info.id} */}\n                      {info.title}\n                    </div>\n                  );\n                })}\n              </div>\n              <div className=\"card\" id={question[0].id}>\n                <div className=\"infoName\">\n                  <h2>Info Name</h2>\n                </div>\n                <div className=\"img-container\">\n                  <img\n                    className=\"headImage\"\n                    src=\"../images/placeholder.png\"\n                    alt=\"\"\n                  />\n                </div>\n\n                <div className=\"question\">\n                  <h2>{question[0].info}</h2>\n                </div>\n              </div>\n              <button\n                className=\"close-btn\"\n                onClick={() => setShowQuestionTrue()}\n              >\n                <AiOutlineClose />\n              </button>\n            </div>\n          </>\n        )}\n\n        {/* CARD W/ QUESTION */}\n        {isShowQuestion && (\n          <div className=\"container\">\n            <>\n              <button\n                className=\"info-btn\"\n                onClick={() => setShowInfoTrue(true)}\n              >\n                <BsQuestion />\n              </button>\n              {\n                <>\n                  <div className=\"card\" id={question[0].id}>\n                    <div className=\"year\">{question[0].year}</div>\n                    <div className=\"img-container\">\n                      <img\n                        className=\"headImage\"\n                        src=\"../images/placeholder.png\"\n                        alt=\"\"\n                      />\n                    </div>\n\n                    <div className=\"question\">\n                      <h2>{question[0].text}</h2>\n                    </div>\n                    {question[0].options.length > 1 && (\n                      <div className=\"options\">\n                        <div className=\"option-container\">\n                          {question[0].options.map((option) => {\n                            if (\"nextJump\" in option) {\n                              const nextJump = option.nextJump;\n                              const next = option.next;\n                              return (\n                                <button\n                                  className={`option ${\n                                    option.isActive ? \"active\" : \"\"\n                                  }`}\n                                  key={option.id}\n                                  onClick={() =>\n                                    nextClick(\n                                      option.id,\n                                      option.isActive,\n                                      next,\n                                      nextJump\n                                    )\n                                  }\n                                >\n                                  {option.text}\n                                </button>\n                              );\n                            } else {\n                              const next = option.next;\n                              return (\n                                <button\n                                  className={`option ${\n                                    option.isActive ? \"active\" : \"\"\n                                  }`}\n                                  key={option.id}\n                                  onClick={() =>\n                                    nextClick(\n                                      option.id,\n                                      option.isActive,\n                                      next,\n                                      0\n                                    )\n                                  }\n                                >\n                                  {option.text}\n                                </button>\n                              );\n                            }\n                          })}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"next\">\n                    <div className=\"question-number\">{questionCounter}</div>\n                    <button\n                      className=\"next-button\"\n                      onClick={() => handleClick()}\n                    >\n                      Далее\n                    </button>\n                  </div>\n                </>\n              }\n            </>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\data.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\Question.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\announcements.js",[],["32","33"],{"ruleId":"34","severity":1,"message":"35","line":6,"column":8,"nodeType":"36","messageId":"37","endLine":6,"endColumn":16},{"ruleId":"38","severity":1,"message":"39","line":39,"column":6,"nodeType":"40","endLine":39,"endColumn":16,"suggestions":"41"},{"ruleId":"38","severity":1,"message":"42","line":45,"column":6,"nodeType":"40","endLine":45,"endColumn":23,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":69,"column":38,"nodeType":"46","messageId":"47","endLine":69,"endColumn":40},{"ruleId":"44","severity":1,"message":"45","line":98,"column":41,"nodeType":"46","messageId":"47","endLine":98,"endColumn":43},{"ruleId":"44","severity":1,"message":"45","line":113,"column":38,"nodeType":"46","messageId":"47","endLine":113,"endColumn":40},{"ruleId":"44","severity":1,"message":"45","line":115,"column":38,"nodeType":"46","messageId":"47","endLine":115,"endColumn":40},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},"no-unused-vars","'Question' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkOptions'. Either include it or remove the dependency array.","ArrayExpression",["52"],"React Hook useEffect has missing dependencies: 'checkInfos' and 'checkInfosTest'. Either include them or remove the dependency array.",["53"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-native-reassign",["54"],"no-negated-in-lhs",["55"],{"desc":"56","fix":"57"},{"desc":"58","fix":"59"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [checkOptions, question]",{"range":"60","text":"61"},"Update the dependencies array to be: [checkInfos, checkInfosTest, questionCounter]",{"range":"62","text":"63"},[1295,1305],"[checkOptions, question]",[1435,1452],"[checkInfos, checkInfosTest, questionCounter]"]