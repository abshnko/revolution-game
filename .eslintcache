[{"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\index.js":"1","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\App.js":"2","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\data.js":"3","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\reducer.js":"4","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\periods.js":"5","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\AdminPage.js":"6","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\GamePage.js":"7","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\Question.js":"8","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\CurrentInfo.js":"9","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\Image.js":"10","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\InfoColumn.js":"11","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\LoseScreen.js":"12","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\Loading.js":"13","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\editing.js":"14","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\allQuestions.js":"15","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\currentQuestion.js":"16","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\newQuestion.js":"17","C:\\Programming\\revolution-text-game\\src\\index.js":"18","C:\\Programming\\revolution-text-game\\src\\App.js":"19","C:\\Programming\\revolution-text-game\\src\\data.js":"20","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\GamePage.js":"21","C:\\Programming\\revolution-text-game\\src\\components\\AdminPage\\AdminPage.js":"22","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\CurrentInfo.js":"23","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\InfoColumn.js":"24","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\Loading.js":"25","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\Question.js":"26","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\Image.js":"27","C:\\Programming\\revolution-text-game\\src\\reducer.js":"28","C:\\Programming\\revolution-text-game\\src\\periods.js":"29","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\LoseScreen.js":"30","C:\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\editing.js":"31","C:\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\allQuestions.js":"32","C:\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\newQuestion.js":"33","C:\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\currentQuestion.js":"34","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\InfoModal.js":"35","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\ChooseSex.js":"36","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\Timeline.js":"37","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\Rules.js":"38","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\Gameplay.js":"39","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\Creators.js":"40"},{"size":197,"mtime":1622542163094,"results":"41","hashOfConfig":"42"},{"size":568,"mtime":1625170991523,"results":"43","hashOfConfig":"42"},{"size":157918,"mtime":1625233920935,"results":"44","hashOfConfig":"42"},{"size":2407,"mtime":1622619858785,"results":"45","hashOfConfig":"42"},{"size":372,"mtime":1622627194852,"results":"46","hashOfConfig":"42"},{"size":608,"mtime":1625171018511,"results":"47","hashOfConfig":"42"},{"size":8495,"mtime":1625170982188,"results":"48","hashOfConfig":"42"},{"size":4406,"mtime":1624717023143,"results":"49","hashOfConfig":"42"},{"size":1109,"mtime":1624717001034,"results":"50","hashOfConfig":"42"},{"size":492,"mtime":1624717000814,"results":"51","hashOfConfig":"42"},{"size":1031,"mtime":1624717000686,"results":"52","hashOfConfig":"42"},{"size":295,"mtime":1624717000143,"results":"53","hashOfConfig":"42"},{"size":284,"mtime":1624717000527,"results":"54","hashOfConfig":"42"},{"size":1234,"mtime":1625253501772,"results":"55","hashOfConfig":"42"},{"size":795,"mtime":1625235504649,"results":"56","hashOfConfig":"42"},{"size":4946,"mtime":1625310646523,"results":"57","hashOfConfig":"42"},{"size":226,"mtime":1625235328239,"results":"58","hashOfConfig":"42"},{"size":197,"mtime":1622542163094,"results":"59","hashOfConfig":"60"},{"size":568,"mtime":1625170991523,"results":"61","hashOfConfig":"60"},{"size":238716,"mtime":1640166767021,"results":"62","hashOfConfig":"60"},{"size":836,"mtime":1639503740279,"results":"63","hashOfConfig":"60"},{"size":586,"mtime":1629127238725,"results":"64","hashOfConfig":"60"},{"size":1786,"mtime":1640168056573,"results":"65","hashOfConfig":"60"},{"size":1031,"mtime":1624717000686,"results":"66","hashOfConfig":"60"},{"size":284,"mtime":1624717000527,"results":"67","hashOfConfig":"60"},{"size":14290,"mtime":1639057498520,"results":"68","hashOfConfig":"60"},{"size":687,"mtime":1638170530986,"results":"69","hashOfConfig":"60"},{"size":2407,"mtime":1622619858785,"results":"70","hashOfConfig":"60"},{"size":372,"mtime":1638172571328,"results":"71","hashOfConfig":"60"},{"size":588,"mtime":1636288283291,"results":"72","hashOfConfig":"60"},{"size":1234,"mtime":1629127719389,"results":"73","hashOfConfig":"60"},{"size":795,"mtime":1625235504649,"results":"74","hashOfConfig":"60"},{"size":226,"mtime":1625235328239,"results":"75","hashOfConfig":"60"},{"size":4946,"mtime":1625310646523,"results":"76","hashOfConfig":"60"},{"size":235,"mtime":1635626823703,"results":"77","hashOfConfig":"60"},{"size":1942,"mtime":1635800754863,"results":"78","hashOfConfig":"60"},{"size":4242,"mtime":1639074403980,"results":"79","hashOfConfig":"60"},{"size":2907,"mtime":1640165408868,"results":"80","hashOfConfig":"60"},{"size":12721,"mtime":1640190236182,"results":"81","hashOfConfig":"60"},{"size":3134,"mtime":1640455220261,"results":"82","hashOfConfig":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"l6ohlv",{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"85"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"85"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"85"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},"1rf3bob",{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"123"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"123"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"123"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"123"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"123"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"123"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"123"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\index.js",[],["175","176"],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\App.js",["177"],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\data.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\reducer.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\periods.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\AdminPage.js",["178"],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\GamePage.js",["179","180","181","182","183","184","185","186","187","188"],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\Question.js",["189","190","191","192"],"import React from \"react\";\r\nimport { BsQuestion } from \"react-icons/bs\";\r\n\r\nconst Question = ({ question, nextClick, chooseDisplayedInfo }) => {\r\n  const checkInfosForOptions = (option) => {\r\n    if (!option.infos) return option.text;\r\n    let allId = option.infos.map((e) => e.id);\r\n    let allText = option.infos.map((e) => e.altText);\r\n\r\n    const l = (parts, i) => {\r\n      //для верной передачи цифр\r\n      return (\r\n        <a\r\n          className=\"info-link\"\r\n          onClick={() => {\r\n            chooseDisplayedInfo(allId[Math.floor(i / 2)]);\r\n          }}\r\n        >\r\n          {parts[i]}\r\n        </a>\r\n      );\r\n    };\r\n    let parts = option.text.split(new RegExp(`(${allText.join(\"|\")})`));\r\n    for (let i = 1; i < parts.length; i += 2) {\r\n      parts[i] = l(parts, i);\r\n    }\r\n    return parts;\r\n  };\r\n\r\n  const checkInfosForQuestion = (question) => {\r\n    if (!question[0].infos) return <h2>{question[0].text}</h2>;\r\n    let allId = question[0].infos.map((e) => e.id);\r\n    let allText = question[0].infos.map((e) => e.altText);\r\n\r\n    const l = (parts, i) => {\r\n      //для верной передачи цифр\r\n      return (\r\n        <a\r\n          className=\"info-link\"\r\n          onClick={() => {\r\n            chooseDisplayedInfo(allId[Math.floor(i / 2)]);\r\n          }}\r\n        >\r\n          {parts[i]}\r\n        </a>\r\n      );\r\n    };\r\n    let parts = question[0].text.split(new RegExp(`(${allText.join(\"|\")})`));\r\n    console.log(parts);\r\n    for (let i = 1; i < parts.length; i += 2) {\r\n      parts[i] = l(parts, i);\r\n    }\r\n    return <h2>{parts}</h2>;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {question[0].imgRef !== \"\" && (\r\n        <div className=\"img-ref\">\r\n          <a href={question[0].imgRef}>источник</a>\r\n        </div>\r\n      )}\r\n      {/* <div className=\"id-testing\">current: {question[0].id}</div> */}{\" \"}\r\n      {/*testing */}\r\n      <div className=\"question\">{checkInfosForQuestion(question)}</div>\r\n      {question[0].options.length > 1 && (\r\n        <div className=\"options\">\r\n          <div className=\"option-container\">\r\n            {question[0].options.map((option) => {\r\n              if (\"nextJump\" in option) {\r\n                if (\"jumpFromHere\" in option) {\r\n                  var jumpFromHere = option.jumpFromHere;\r\n                }\r\n                const nextJump = option.nextJump;\r\n                const next = option.next;\r\n                return (\r\n                  <>\r\n                    {/*testing*/}\r\n                    {/* <div className=\"next-option-testing\">\r\n                      nextJump: {option.nextJump}\r\n                    </div> */}\r\n                    <button\r\n                      className={`option ${option.isActive ? \"active\" : \"\"}`}\r\n                      key={option.id}\r\n                      onClick={() =>\r\n                        nextClick(\r\n                          option.id,\r\n                          option.isActive,\r\n                          next,\r\n                          nextJump,\r\n                          jumpFromHere\r\n                        )\r\n                      }\r\n                    >\r\n                      {checkInfosForOptions(option)}\r\n                    </button>\r\n                  </>\r\n                );\r\n              } else {\r\n                if (\"jumpFromHere\" in option) {\r\n                  var jumpFromHere = option.jumpFromHere;\r\n                }\r\n                const next = option.next;\r\n                return (\r\n                  <>\r\n                    {/*testing*/}\r\n                    {/* <div className=\"next-option-testing\">\r\n                      next: {option.next}\r\n                    </div> */}\r\n                    <button\r\n                      className={`option ${option.isActive ? \"active\" : \"\"}`}\r\n                      key={option.id}\r\n                      onClick={() =>\r\n                        nextClick(\r\n                          option.id,\r\n                          option.isActive,\r\n                          next,\r\n                          0,\r\n                          jumpFromHere\r\n                        )\r\n                      }\r\n                    >\r\n                      {checkInfosForOptions(option)}\r\n                    </button>\r\n                  </>\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\CurrentInfo.js",["193","194"],"import React from \"react\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\n\r\nconst CurrentInfo = ({\r\n  question,\r\n  setIsShowInfo,\r\n  INFOS,\r\n  currentInfoDisplayed,\r\n}) => {\r\n  return (\r\n    <div className=\"card\" id={question[0].id}>\r\n      <div className=\"close-info\">\r\n        <button\r\n          onClick={() => {\r\n            setIsShowInfo(false);\r\n            INFOS.map((INFO) => {\r\n              INFO.infos.map((info, infoIndex) => {\r\n                info.isActive = false;\r\n              });\r\n            });\r\n          }}\r\n        >\r\n          <i>\r\n            <AiOutlineClose />\r\n          </i>\r\n        </button>\r\n      </div>\r\n      <div className=\"current-info\">\r\n        <div className=\"infoName\">\r\n          <h2>{currentInfoDisplayed.infoName}</h2>\r\n        </div>\r\n        {/* <div className=\"img-container\">\r\n                  <img className=\"headImage\" src={placeholder} alt=\"img here\" />\r\n                </div> */}\r\n\r\n        <div className=\"info-text\">\r\n          <p>{currentInfoDisplayed.infoText}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentInfo;\r\n","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\Image.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\InfoColumn.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\LoseScreen.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\Loading.js",["195"],"import React from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { CgSpinner } from \"react-icons/cg\";\r\n\r\nfunction Loading(props) {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <i>\r\n        <CgSpinner />\r\n      </i>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\editing.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\allQuestions.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\currentQuestion.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\newQuestion.js",[],"C:\\Programming\\revolution-text-game\\src\\index.js",[],["196","197"],"C:\\Programming\\revolution-text-game\\src\\App.js",["198"],"import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport GamePage from \"./components/GamePage/GamePage\";\nimport AdminPage from \"./components/AdminPage/AdminPage\";\nimport data from \"./data\";\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route path=\"/admin\">\n            <AdminPage questions={data} />\n          </Route>\n          <Route path=\"/\">\n            <GamePage questions={data} />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","C:\\Programming\\revolution-text-game\\src\\data.js",[],"C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\GamePage.js",[],"C:\\Programming\\revolution-text-game\\src\\components\\AdminPage\\AdminPage.js",["199"],"import React, { useState } from \"react\";\r\nimport Editing from \"./EditingPage/editing\";\r\nimport \"../../styles/adminPage/adminPage.css\";\r\n\r\nconst AdminPage = ({ questions }) => {\r\n  const [passwordOK, setPasswordOK] = useState(true); //change to false --- JWT token\r\n  return (\r\n    <>\r\n      <div className=\"admin-page\">\r\n        {!passwordOK && (\r\n          <div className=\"authenticate-card\">\r\n            <h2>Admin authorization</h2>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {passwordOK && <Editing questions={questions} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdminPage;\r\n","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\CurrentInfo.js",["200","201","202"],"import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nconst CurrentInfo = ({\r\n  question,\r\n  setIsShowInfo,\r\n  INFOS,\r\n  currentInfoDisplayed,\r\n}) => {\r\n  const [show, setShow] = useState(false);\r\n  const style = currentInfoDisplayed.infoImg !== \"\" ? \"modal\" : \"no-img-modal\";\r\n  return (\r\n    <>\r\n      {/* <CSSTransition\r\n        in={show}\r\n        timeout={300}\r\n        classNames=\"alert\"\r\n        component={null}\r\n      > */}\r\n      <div className={`${style}`} id={question[0].id}>\r\n        <div className=\"current-info\">\r\n          <div className=\"info-name\">\r\n            <h2>{currentInfoDisplayed.infoName}</h2>\r\n          </div>\r\n          <div className=\"info-text\">\r\n            <p>{currentInfoDisplayed.infoText}</p>\r\n          </div>\r\n          <div className=\"hr\">\r\n            <hr />\r\n          </div>\r\n        </div>\r\n        <div className=\"right-column\">\r\n          <div className=\"img\">\r\n            {\"infoImg\" in currentInfoDisplayed ? (\r\n              <img\r\n                src={\r\n                  process.env.PUBLIC_URL +\r\n                  `/images/${currentInfoDisplayed.infoImg}`\r\n                }\r\n                alt=\"\"\r\n                onLoad={() => setShow(true)}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          <div className=\"close-info\">\r\n            <button\r\n              onClick={() => {\r\n                setShow(false);\r\n                setTimeout(() => {\r\n                  setIsShowInfo(false);\r\n                }, 100);\r\n              }}\r\n            >\r\n              Понятно\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* </CSSTransition> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CurrentInfo;\r\n","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\InfoColumn.js",[],["203","204"],"C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\Loading.js",["205"],"C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\Question.js",["206","207","208","209","210","211","212","213"],"import React from \"react\";\r\nimport { BsQuestion } from \"react-icons/bs\";\r\nimport { useEffect, useState } from \"react\";\r\nimport LoseScreen from \"./LoseScreen\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { Fade, Transform } from \"react-animation-components\";\r\n\r\nconst Question = ({\r\n  question,\r\n  nextClick,\r\n  chooseDisplayedInfo,\r\n  isLoading,\r\n  setImgLoaded,\r\n  lose,\r\n}) => {\r\n  const [oneArrow, setOneArrow] = useState(false);\r\n  const [twoArrows, setTwoArrows] = useState(false);\r\n  const [zeroArrows, setZeroArrows] = useState(false);\r\n  const [makeSmallText, setMakeSmallText] = useState(false);\r\n\r\n  const checkInfosForOptions = (option) => {\r\n    if (!option.infos) {\r\n      let number = option.text[0];\r\n      const n = <div className=\"number\">{number}</div>;\r\n      var text = option.text.split(/.(.+)/)[1];\r\n      text = text.split(/.(.+)/)[1];\r\n      const header = text.split(/[.,,,:,;,!,?](.+)/);\r\n      const high = <div className=\"highlighted\">{header[0]}</div>;\r\n      const rest = header[1];\r\n      const all = (\r\n        <div className=\"header\">\r\n          {n}\r\n          {high}\r\n        </div>\r\n      );\r\n      const newText = [all, rest];\r\n      return <div className=\"text\">{newText}</div>;\r\n    }\r\n    let allId = option.infos.map((e) => e.id);\r\n    let allText = option.infos.map((e) => e.altText);\r\n\r\n    const l = (parts, i) => {\r\n      //для верной передачи цифр\r\n      return (\r\n        <a\r\n          className=\"info-link\"\r\n          onClick={() => {\r\n            chooseDisplayedInfo(allId[Math.floor(i / 2)]);\r\n          }}\r\n        >\r\n          {parts[i]}\r\n        </a>\r\n      );\r\n    };\r\n\r\n    const separateParts = (text) => {\r\n      const number = text[0];\r\n      const n = <div className=\"number\">{number}</div>; //NUMBER\r\n      let allButNumber = text.split(/.(.+)/)[1];\r\n      allButNumber = allButNumber.split(/.(.+)/)[1];\r\n      let header = allButNumber.split(/[.,,,:,;,!,?](.+)/)[0]; //HEADER\r\n      let theRest = allButNumber.split(/[.,,,:,;,!,?](.+)/)[1]; //REST\r\n      let checkHeader = header.split(new RegExp(`(${allText.join(\"|\")})`));\r\n      let checkRest;\r\n      if (theRest !== undefined) {\r\n        checkRest = theRest.split(new RegExp(`(${allText.join(\"|\")})`));\r\n      } else {\r\n        checkRest = [];\r\n      }\r\n\r\n      //    IF LINK IN HEADER\r\n      if (checkHeader.length > 2) {\r\n        for (let i = 1; i < checkHeader.length; i += 2) {\r\n          checkHeader[i] = l(checkHeader, i);\r\n        }\r\n\r\n        let firstPart = (\r\n          <div className=\"highlighted\">\r\n            {[checkHeader[0], checkHeader[1], checkHeader[2]]}\r\n          </div>\r\n        );\r\n        const all = (\r\n          <div className=\"header\">\r\n            {n}\r\n            {firstPart}\r\n          </div>\r\n        );\r\n        if (theRest !== undefined) {\r\n          checkHeader.push(theRest);\r\n        }\r\n        let final = [all, checkHeader[checkHeader.length - 1]];\r\n        return [final];\r\n      }\r\n      if (checkRest.length > 2) {\r\n        for (let i = 1; i < checkRest.length; i += 2) {\r\n          checkRest[i] = l(checkRest, i);\r\n        }\r\n        let firstPart = <div className=\"highlighted\">{checkHeader[0]}</div>;\r\n        const all = (\r\n          <div className=\"header\">\r\n            {n}\r\n            {firstPart}\r\n          </div>\r\n        );\r\n        let final = [all, checkRest];\r\n        return [final];\r\n      }\r\n    };\r\n\r\n    let parts = option.text.split(new RegExp(`(${allText.join(\"|\")})`));\r\n    for (let i = 1; i < parts.length; i += 2) {\r\n      parts[i] = l(parts, i);\r\n    }\r\n\r\n    const separatedText = separateParts(option.text);\r\n    return <div className=\"text\">{separatedText}</div>;\r\n  };\r\n\r\n  const checkInfosForQuestion = (question) => {\r\n    if (!question[0].infos) return <h2>{question[0].text}</h2>;\r\n    let allId = question[0].infos.map((e) => e.id);\r\n    let allText = question[0].infos.map((e) => e.altText);\r\n\r\n    const l = (parts, i) => {\r\n      //для верной передачи цифр\r\n      return (\r\n        <a\r\n          className=\"info-link\"\r\n          onClick={() => {\r\n            chooseDisplayedInfo(allId[Math.floor(i / 2)]);\r\n          }}\r\n        >\r\n          {parts[i]}\r\n        </a>\r\n      );\r\n    };\r\n    let parts = question[0].text.split(new RegExp(`(${allText.join(\"|\")})`));\r\n    for (let i = 1; i < parts.length; i += 2) {\r\n      parts[i] = l(parts, i);\r\n    }\r\n    return <h2>{parts}</h2>;\r\n  };\r\n\r\n  const isOverflown = ({\r\n    clientWidth,\r\n    clientHeight,\r\n    scrollWidth,\r\n    scrollHeight,\r\n  }) => {\r\n    return scrollHeight > clientHeight || scrollWidth > clientWidth;\r\n  };\r\n\r\n  const heightIsOverNpx = ({ clientHeight }, number) => {\r\n    return clientHeight >= number;\r\n  };\r\n\r\n  const determineArrowsNumber = () => {\r\n    const main = document.getElementsByClassName(\"main\")[0];\r\n    const viewportHeight =\r\n      document.getElementsByTagName(\"body\")[0].clientHeight;\r\n    const overflowMain = isOverflown(main);\r\n    const questionText = document.getElementsByClassName(\"question-text\")[0];\r\n    const heightOver200 = heightIsOverNpx(questionText, 200);\r\n    const heightOver100 = heightIsOverNpx(questionText, 100);\r\n    if (overflowMain) {\r\n      heightOver200 ? setZeroArrows(true) : setOneArrow(true);\r\n    } else if (heightOver200) {\r\n      setZeroArrows(true);\r\n    } else {\r\n      viewportHeight <= 1000 && heightOver100\r\n        ? setOneArrow(true)\r\n        : setTwoArrows(true);\r\n    }\r\n  };\r\n\r\n  const determineTextSmall = () => {\r\n    const questionText = document.getElementsByClassName(\"question-text\")[0];\r\n    if (heightIsOverNpx(questionText, 700)) {\r\n      setMakeSmallText(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    determineArrowsNumber();\r\n    determineTextSmall();\r\n  }, [question]);\r\n\r\n  return (\r\n    <>\r\n      {/* <TransitionGroup component={null}>\r\n        <CSSTransition\r\n          in={!isLoading}\r\n          key={question[0].id}\r\n          timeout={500}\r\n          classNames=\"alert\"\r\n        > */}\r\n      <>\r\n        {/* <div className=\"id-testing\">current: {question[0].id}</div> */}{\" \"}\r\n        {/*testing */}\r\n        {question[0].options.length === 1 && (\r\n          <div className=\"arrows\">\r\n            {!zeroArrows && oneArrow && (\r\n              <svg\r\n                className=\"arrow\"\r\n                width=\"87\"\r\n                height=\"157\"\r\n                viewBox=\"0 0 87 157\"\r\n                fill=\"none\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n              >\r\n                <path\r\n                  fill-rule=\"evenodd\"\r\n                  clip-rule=\"evenodd\"\r\n                  d=\"M85.1192 93.312C86.2457 94.1102 86.5118 95.6706 85.7135 96.7972L44.3733 155.138C43.8986 155.808 43.1253 156.202 42.3044 156.192C41.4835 156.183 40.7196 155.771 40.2606 155.09L0.927173 96.7493C0.15533 95.6045 0.457683 94.0507 1.60251 93.2789C2.74733 92.507 4.3011 92.8094 5.07295 93.9542L39.8335 145.512L39.8335 3C39.8335 1.61929 40.9528 0.499998 42.3335 0.499998C43.7142 0.499998 44.8335 1.61929 44.8335 3L44.8335 145.84L81.6339 93.9064C82.4322 92.7798 83.9926 92.5137 85.1192 93.312Z\"\r\n                  fill=\"#FF2400\"\r\n                />\r\n              </svg>\r\n            )}\r\n            {!zeroArrows && twoArrows && (\r\n              <>\r\n                <svg\r\n                  className=\"arrow\"\r\n                  width=\"87\"\r\n                  height=\"157\"\r\n                  viewBox=\"0 0 87 157\"\r\n                  fill=\"none\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                >\r\n                  <path\r\n                    fill-rule=\"evenodd\"\r\n                    clip-rule=\"evenodd\"\r\n                    d=\"M85.1192 93.312C86.2457 94.1102 86.5118 95.6706 85.7135 96.7972L44.3733 155.138C43.8986 155.808 43.1253 156.202 42.3044 156.192C41.4835 156.183 40.7196 155.771 40.2606 155.09L0.927173 96.7493C0.15533 95.6045 0.457683 94.0507 1.60251 93.2789C2.74733 92.507 4.3011 92.8094 5.07295 93.9542L39.8335 145.512L39.8335 3C39.8335 1.61929 40.9528 0.499998 42.3335 0.499998C43.7142 0.499998 44.8335 1.61929 44.8335 3L44.8335 145.84L81.6339 93.9064C82.4322 92.7798 83.9926 92.5137 85.1192 93.312Z\"\r\n                    fill=\"#FF2400\"\r\n                  />\r\n                </svg>\r\n                <svg\r\n                  className=\"arrow\"\r\n                  width=\"87\"\r\n                  height=\"157\"\r\n                  viewBox=\"0 0 87 157\"\r\n                  fill=\"none\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                >\r\n                  <path\r\n                    fill-rule=\"evenodd\"\r\n                    clip-rule=\"evenodd\"\r\n                    d=\"M85.1192 93.312C86.2457 94.1102 86.5118 95.6706 85.7135 96.7972L44.3733 155.138C43.8986 155.808 43.1253 156.202 42.3044 156.192C41.4835 156.183 40.7196 155.771 40.2606 155.09L0.927173 96.7493C0.15533 95.6045 0.457683 94.0507 1.60251 93.2789C2.74733 92.507 4.3011 92.8094 5.07295 93.9542L39.8335 145.512L39.8335 3C39.8335 1.61929 40.9528 0.499998 42.3335 0.499998C43.7142 0.499998 44.8335 1.61929 44.8335 3L44.8335 145.84L81.6339 93.9064C82.4322 92.7798 83.9926 92.5137 85.1192 93.312Z\"\r\n                    fill=\"#FF2400\"\r\n                  />\r\n                </svg>\r\n              </>\r\n            )}\r\n          </div>\r\n        )}\r\n        <div className={`question-text ${makeSmallText ? \" small-text\" : \"\"}`}>\r\n          {checkInfosForQuestion(question)}\r\n        </div>\r\n        {question[0].options.length > 1 && (\r\n          <>\r\n            <div className=\"options\">\r\n              <div className=\"option-container\">\r\n                {question[0].options.map((option) => {\r\n                  if (\"nextJump\" in option) {\r\n                    if (\"jumpFromHere\" in option) {\r\n                      var jumpFromHere =\r\n                        localStorage.getItem(\"jump-from-here\") ||\r\n                        option.jumpFromHere;\r\n                      //   localStorage.setItem(\r\n                      //     \"jump-from-here\",\r\n                      //     JSON.stringify(jumpFromHere)\r\n                      //   );\r\n                    }\r\n                    const nextJump =\r\n                      parseInt(localStorage.getItem(\"next-jump\")) ||\r\n                      option.nextJump;\r\n                    // localStorage.setItem(\"next-jump\", JSON.stringify(nextJump));\r\n                    const next = option.next;\r\n                    return (\r\n                      <>\r\n                        {/*testing*/}\r\n                        {/* <div className=\"next-option-testing\">\r\n                      nextJump: {option.nextJump}\r\n                    </div> */}\r\n                        <button\r\n                          className={`option ${\r\n                            option.isActive ? \"active\" : \"\"\r\n                          }`}\r\n                          key={option.id}\r\n                          onClick={() =>\r\n                            nextClick(\r\n                              option.id,\r\n                              option.isActive,\r\n                              next,\r\n                              nextJump,\r\n                              jumpFromHere\r\n                            )\r\n                          }\r\n                        >\r\n                          {checkInfosForOptions(option)}\r\n                          {\"img\" in option ? (\r\n                            <img\r\n                              className=\"option-img\"\r\n                              src={\r\n                                process.env.PUBLIC_URL + `/images/${option.img}`\r\n                              }\r\n                              style={!isLoading ? {} : { display: \"none\" }}\r\n                              alt=\"img here\"\r\n                              onLoad={() => setImgLoaded(true)}\r\n                            />\r\n                          ) : null}\r\n                        </button>\r\n                      </>\r\n                    );\r\n                  } else {\r\n                    if (\"jumpFromHere\" in option) {\r\n                      jumpFromHere =\r\n                        localStorage.getItem(\"jump-from-here\") ||\r\n                        option.jumpFromHere;\r\n                      localStorage.setItem(\r\n                        \"jump-from-here\",\r\n                        JSON.stringify(jumpFromHere)\r\n                      );\r\n                    }\r\n                    const next = option.next;\r\n                    return (\r\n                      <>\r\n                        {/*testing*/}\r\n                        {/* <div className=\"next-option-testing\">\r\n                      next: {option.next}\r\n                    </div> */}\r\n                        <button\r\n                          className={`option ${\r\n                            option.isActive ? \"active\" : \"\"\r\n                          }`}\r\n                          key={option.id}\r\n                          onClick={() =>\r\n                            nextClick(\r\n                              option.id,\r\n                              option.isActive,\r\n                              next,\r\n                              0,\r\n                              jumpFromHere\r\n                            )\r\n                          }\r\n                        >\r\n                          {checkInfosForOptions(option)}\r\n                          {\"img\" in option ? (\r\n                            <img\r\n                              className=\"option-img\"\r\n                              src={\r\n                                process.env.PUBLIC_URL + `/images/${option.img}`\r\n                              }\r\n                              style={!isLoading ? {} : { display: \"none\" }}\r\n                              alt=\"img here\"\r\n                              onLoad={() => setImgLoaded(true)}\r\n                            />\r\n                          ) : null}\r\n                        </button>\r\n                      </>\r\n                    );\r\n                  }\r\n                })}\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n        {lose && <LoseScreen question={question} />}\r\n        {question[0].options.length === 1 && (\r\n          <div className=\"down-line\">\r\n            <hr />\r\n          </div>\r\n        )}\r\n      </>\r\n      {/* </CSSTransition>\r\n      </TransitionGroup> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\Image.js",[],"C:\\Programming\\revolution-text-game\\src\\reducer.js",[],"C:\\Programming\\revolution-text-game\\src\\periods.js",[],"C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\LoseScreen.js",[],"C:\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\editing.js",[],"C:\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\allQuestions.js",[],"C:\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\newQuestion.js",[],"C:\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\currentQuestion.js",[],"C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\InfoModal.js",[],"C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\ChooseSex.js",[],"C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\Timeline.js",["214","215","216","217"],"import React, { useState } from \"react\";\r\nimport { Chrono } from \"react-chrono\";\r\nimport { useEffect } from \"react\";\r\nimport circle from \"../../images/circle-24.png\";\r\nimport current from \"../../images/current.png\";\r\nimport ReactDOMServer from \"react-dom/server\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nconst Timeline = ({ latestPeriod, questionCounter }) => {\r\n  const [counter, setCounter] = useState(() => {\r\n    return JSON.parse(localStorage.getItem(\"period-counter\")) || 1;\r\n  });\r\n  const [allPeriods, setAllPeriods] = useState(() => {\r\n    //   const saved = JSON.parse(localStorage.getItem('periods'))\r\n    return (\r\n      JSON.parse(localStorage.getItem(\"periods\")) || [\r\n        { title: \"1900-1914\" },\r\n        { title: \"\" },\r\n        { title: \"\" },\r\n        { title: \"\" },\r\n        { title: \"\" },\r\n        { title: \"\" },\r\n        { title: \"\" },\r\n      ]\r\n    );\r\n  });\r\n  const checkIfPeriodExists = () => {\r\n    for (var i = 0; i < allPeriods.length; i++) {\r\n      //   const parts = latestPeriod.split(\"-\");\r\n      //   const newP = (\r\n      //     <p>\r\n      //       {parts[0]}-<span>{parts[1]}</span>\r\n      //     </p>\r\n      //   );\r\n      //   console.log(newP);\r\n      //   const ss = ReactDOMServer.renderToString(allPeriods[i].title);\r\n\r\n      if (allPeriods[i].title === latestPeriod) {\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n\r\n  const addNewPeriod = () => {\r\n    if (!checkIfPeriodExists()) {\r\n      for (var j = 0; j < allPeriods.length; j++) {\r\n        if (allPeriods[j].title === \"\") {\r\n          //   const parts = latestPeriod.split(\"-\");\r\n          //   console.log(parts);\r\n          //   const newP = (\r\n          //     <p>\r\n          //       {parts[0]}-<span>{parts[1]}</span>\r\n          //     </p>\r\n          //   );\r\n          //   console.log(newP);\r\n          //   allPeriods[j].title = newP;\r\n          //   allPeriods[j].title = latestPeriod;\r\n          const allPeriodsCopy = [...allPeriods];\r\n          console.log(allPeriodsCopy);\r\n          allPeriodsCopy[j].title = latestPeriod;\r\n          setAllPeriods(allPeriodsCopy);\r\n          setCounter(counter + 1);\r\n          console.log(counter);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const passImages = (counter) => {\r\n    let images = [];\r\n    for (let i = 0; i < counter - 1; i++) {\r\n      images.push(<img style={{ width: \"23px\" }} src={circle} alt=\"IMAG\" />);\r\n    }\r\n    images.push(<img style={{ width: \"30px\" }} src={current} alt=\"question\" />);\r\n    for (let i = 0; i < 7 - counter; i++) {\r\n      images.push(\r\n        <img\r\n          style={{ width: \"20px\" }}\r\n          src={process.env.PUBLIC_URL + `/images/question-mark.png`}\r\n          alt=\"question\"\r\n        />\r\n      );\r\n    }\r\n\r\n    return images;\r\n  };\r\n\r\n  //   const getClientWidth = () => {\r\n  //     return document.getElementsByTagName(\"body\")[0].clientWidth;\r\n  //   };\r\n  const clientWidth = document.getElementsByTagName(\"body\")[0].clientWidth;\r\n  console.log(clientWidth);\r\n\r\n  useEffect(() => {\r\n    console.log(\"IN USE EFFECT TIMELINE\");\r\n    addNewPeriod();\r\n    // localStorage.setItem(\"periods\", JSON.stringify(allPeriods));\r\n    // localStorage.setItem(\"period-counter\", JSON.stringify(counter));\r\n  }, [questionCounter, counter]);\r\n\r\n  const images = passImages(counter);\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      <Chrono\r\n        itemWidth={\r\n          clientWidth >= 3500\r\n            ? \"450\"\r\n            : clientWidth >= 2400\r\n            ? \"285\"\r\n            : clientWidth >= 1920\r\n            ? \"230\"\r\n            : clientWidth >= 1600\r\n            ? \"190\"\r\n            : clientWidth >= 1440\r\n            ? \"170\"\r\n            : clientWidth >= 1366\r\n            ? \"170\"\r\n            : \"130\"\r\n        }\r\n        hideControls={true}\r\n        items={allPeriods}\r\n        allowDynamicUpdate={true}\r\n        theme={{\r\n          primary: \"black\",\r\n          secondary: \"red\",\r\n          cardBgColor: \"yellow\",\r\n          cardForeColor: \"violet\",\r\n          titleColor: \"black\",\r\n        }}\r\n        onItemSelected={() => console.log(\"ITEM WAS SELECTED\")}\r\n      >\r\n        <div className=\"chrono-icons\">{images}</div>\r\n      </Chrono>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timeline;\r\n","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\Rules.js",[],"C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\Gameplay.js",["218","219","220","221","222","223","224","225","226","227","228","229","230","231"],"import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport \"../../styles/main/style.css\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { Fade, Transform } from \"react-animation-components\";\r\nimport periods from \"../../periods\";\r\nimport Question from \"./Question\";\r\nimport Image from \"./Image\";\r\nimport CurrentInfo from \"./CurrentInfo\";\r\nimport Loading from \"./Loading\";\r\nimport ChooseSex from \"./ChooseSex\";\r\nimport LoseScreen from \"./LoseScreen\";\r\nimport Timeline from \"./Timeline\";\r\n\r\nconst Gameplay = ({ questions }) => {\r\n  const [index, setIndex] = useState(1000);\r\n  const [show, setShow] = useState(false);\r\n  //   const [showInfo, setShowInfo] = useState(false);\r\n  const [question, setQuestion] = useState(() => {\r\n    const saved = localStorage.getItem(\"question\");\r\n    const initialValue = JSON.parse(saved);\r\n    return initialValue || questions;\r\n  });\r\n  const [questionChanged, setQuestionChanged] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [indexChanged, setIndexChanged] = useState(false);\r\n  const [isShowInfo, setIsShowInfo] = useState(false);\r\n  const [INFOS, setINFOS] = useState(periods);\r\n  const [questionCounter, setQuestionCounter] = useState(() => {\r\n    const counter = parseInt(localStorage.getItem(\"question-number\"));\r\n    return counter || 0;\r\n  });\r\n  const [isJump, setIsJump] = useState(false);\r\n  const [jump, setJump] = useState(0);\r\n  //   const [isShowQuestion, setIsShowQuestion] = useState(true);\r\n  const [imgLoaded, setImgLoaded] = useState(false);\r\n  const [currentInfoDisplayed, setCurrentInfoDisplayed] = useState();\r\n  const [lose, setLose] = useState(false);\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  function useForceUpdate() {\r\n    const [state, setState] = useState(0);\r\n    return () => setState((state) => state + 1);\r\n  }\r\n\r\n  const addInfoHelper = (singleInfo) => {\r\n    const i = INFOS.findIndex(\r\n      (infoObj) => infoObj.period === question[0].period\r\n    );\r\n    INFOS.forEach((INFO) => {\r\n      INFO.isShowEntries = false;\r\n    });\r\n    const newINFO = {\r\n      infoId: singleInfo.id,\r\n      infoName: singleInfo.name,\r\n      infoText: singleInfo.text,\r\n      infoImg: singleInfo.img,\r\n      isActive: false,\r\n    };\r\n    if (i !== -1) {\r\n      var infosArray = INFOS[i].infos;\r\n    }\r\n    infosArray.push(newINFO);\r\n    const newObj = { ...INFOS[i], infos: infosArray, isShowEntries: true };\r\n    const newArray = INFOS;\r\n    newArray[i] = newObj;\r\n    setINFOS(newArray);\r\n    console.log(INFOS);\r\n  };\r\n\r\n  const addINFO = () => {\r\n    if (\"infos\" in question[0]) {\r\n      question[0].infos.forEach((singleInfo) => {\r\n        addInfoHelper(singleInfo);\r\n      });\r\n    }\r\n    question[0].options.forEach((option) => {\r\n      if (\"infos\" in option) {\r\n        option.infos.forEach((singleInfo) => {\r\n          addInfoHelper(singleInfo);\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (!isShowInfo) {\r\n      if (index !== question[0].id) {\r\n        setShow(false);\r\n        const time = setTimeout(() => {\r\n          setImgLoaded(false);\r\n          setIsLoading(true);\r\n          setQuestion(questions.filter((item) => item.id === index));\r\n          setQuestionCounter(questionCounter + 1);\r\n          setQuestionChanged(true);\r\n          setQuestionChanged(false);\r\n          setIndexChanged(false);\r\n        }, 100);\r\n        // return clearTimeout(time);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkOptions();\r\n    // setShow(true);\r\n    console.log(question[0]);\r\n    console.log(\"NEXT JUMP: \", jump);\r\n  }, [question]);\r\n\r\n  useEffect(() => {\r\n    addINFO();\r\n    // setShowQuestionSatus();\r\n    if (question[0].img === \"\") {\r\n      setImgLoaded(true);\r\n    }\r\n    if (\"lose\" in question[0]) {\r\n      setLose(true);\r\n    }\r\n\r\n    // localStorage.setItem(\"question\", JSON.stringify(question));\r\n    // localStorage.setItem(\"question-number\", JSON.stringify(questionCounter));\r\n  }, [questionCounter]);\r\n\r\n  useEffect(() => {\r\n    const time = setTimeout(() => {\r\n      if (imgLoaded) {\r\n        setIsLoading(false);\r\n        // setShow(true);\r\n      }\r\n    }, 100);\r\n    return () => clearTimeout(time);\r\n  }, [imgLoaded]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"isLOADING: \", isLoading);\r\n    isLoading ? setShow(false) : setShow(true);\r\n  }, [isLoading]);\r\n\r\n  const nextClick = (id, isActive, next, nextJump, jumpFromHere) => {\r\n    if (nextJump !== 0) {\r\n      setJump(nextJump);\r\n    }\r\n    if (jumpFromHere) setIsJump(true);\r\n    setIndex(next);\r\n\r\n    //change active option\r\n    const i = question[0].options.findIndex((option) => option.id === id);\r\n    const clone = [...question[0].options];\r\n    clone[i] = { ...clone[i], isActive: true };\r\n    const objClone = [...question];\r\n    objClone[0] = { ...question[0], options: clone };\r\n\r\n    setQuestion(objClone);\r\n    question[0].options.forEach((option) => {\r\n      option.isActive = false;\r\n    });\r\n    setIndexChanged(true);\r\n  };\r\n\r\n  const chooseDisplayedInfo = (infoId) => {\r\n    //check active info\r\n    INFOS.forEach((INFO, INFOindex) => {\r\n      const i = INFO.infos.findIndex((info) => info.infoId === infoId);\r\n      if (i !== -1) {\r\n        INFO.infos.forEach((info, infoIndex) => {\r\n          const arrayInfos = [...INFO.infos];\r\n          arrayInfos[i] = { ...arrayInfos[i], isActive: true };\r\n          setCurrentInfoDisplayed(arrayInfos[i]);\r\n          setIsShowInfo(true);\r\n          const INFOArrCLone = [...INFOS];\r\n          INFOArrCLone[INFOindex] = {\r\n            ...INFOArrCLone[INFOindex],\r\n            infos: arrayInfos,\r\n          };\r\n          setINFOS(INFOArrCLone);\r\n        });\r\n      }\r\n      INFO.infos.forEach((info) => {\r\n        info.isActive = false;\r\n      });\r\n    });\r\n    console.log(\"CURRENT INFO: \", currentInfoDisplayed);\r\n  };\r\n\r\n  //check if there's more than one option = it's a question, otherwise =it's an announcement\r\n  const checkOptions = () => {\r\n    if (question[0].options.length === 1) {\r\n      if (isJump) {\r\n        setIndex(jump);\r\n        console.log(jump);\r\n        setIsJump(false);\r\n      } else if (\"jumpFromHere\" in question[0].options[0]) {\r\n        setIsJump(true);\r\n        setIndex(question[0].options[0].next);\r\n      } else {\r\n        setIndex(question[0].options[0].next);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <>\r\n        <div className=\"container\">\r\n          <div className=\"timeline\">\r\n            <Timeline\r\n              latestPeriod={question[0].period}\r\n              questionCounter={questionCounter}\r\n            />\r\n          </div>\r\n          {isShowInfo && ( //show currently chosen info entry\r\n            <CSSTransition in={isShowInfo} timeout={300} classNames=\"alert\">\r\n              <CurrentInfo\r\n                question={question}\r\n                setIsShowInfo={setIsShowInfo}\r\n                INFOS={INFOS}\r\n                currentInfoDisplayed={currentInfoDisplayed}\r\n              />\r\n            </CSSTransition>\r\n          )}\r\n          <div className=\"controls\">\r\n            {/*refactor */}\r\n            <div className=\"infos\">\r\n              {\"infos\" in question[0]\r\n                ? question[0].infos.map((info) => {\r\n                    return (\r\n                      <div\r\n                        className=\"info\"\r\n                        onClick={() => chooseDisplayedInfo(info.id)}\r\n                      >\r\n                        <svg\r\n                          width=\"12\"\r\n                          height=\"10\"\r\n                          viewBox=\"0 0 12 10\"\r\n                          fill=\"none\"\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                        >\r\n                          <path\r\n                            d=\"M11.3247 4.90503L0.0747066 9.66817L0.074707 0.141889L11.3247 4.90503Z\"\r\n                            fill=\"black\"\r\n                          />\r\n                        </svg>\r\n                        {info.name}\r\n                      </div>\r\n                    );\r\n                  })\r\n                : null}\r\n\r\n              {question[0].options.map((option) => {\r\n                if (\"infos\" in option) {\r\n                  let infos = [];\r\n                  infos = option.infos.map((info) => {\r\n                    return (\r\n                      <div\r\n                        className=\"info\"\r\n                        onClick={() => chooseDisplayedInfo(info.id)}\r\n                      >\r\n                        <svg\r\n                          width=\"12\"\r\n                          height=\"10\"\r\n                          viewBox=\"0 0 12 10\"\r\n                          fill=\"none\"\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                        >\r\n                          <path\r\n                            d=\"M11.3247 4.90503L0.0747066 9.66817L0.074707 0.141889L11.3247 4.90503Z\"\r\n                            fill=\"black\"\r\n                          />\r\n                        </svg>\r\n                        {info.name}\r\n                      </div>\r\n                    );\r\n                  });\r\n                  return infos;\r\n                }\r\n                return null;\r\n              })}\r\n            </div>\r\n            <div className=\"year\">\r\n              {question[0].year}\r\n              <p>Человек в эпоху войн и революций</p>\r\n            </div>\r\n            {!lose && (\r\n              <div className=\"next\">\r\n                <button\r\n                  className={`next-button ${\r\n                    indexChanged || question[0].options.length === 1\r\n                      ? \"next-button-changed\"\r\n                      : \"\"\r\n                  }`}\r\n                  onClick={() => {\r\n                    handleClick();\r\n                  }}\r\n                >\r\n                  <img\r\n                    src={process.env.PUBLIC_URL + `/images/red-arrow.png`}\r\n                    alt=\"arrow\"\r\n                  />\r\n                </button>\r\n                <p>следующий вопрос</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div className=\"line\">\r\n            <hr />\r\n            {/* <button\r\n                      onClick={() => setShow(!show)}\r\n                    >{`SHOW: ${show}`}</button>\r\n                    <p>{`imgLoaded: ${imgLoaded}, isLoading: ${isLoading}`}</p> */}\r\n          </div>\r\n          <div className=\"question-number\">\r\n            {questionCounter !== 0 ? (\r\n              <>\r\n                <span>{questionCounter}</span> вопрос\r\n              </>\r\n            ) : (\r\n              \"Начало игры\"\r\n            )}\r\n          </div>\r\n          {\"isChooseSex\" in question[0] && (\r\n            <CSSTransition in={show} timeout={5000} classNames=\"alert\">\r\n              <>\r\n                <ChooseSex\r\n                  question={question}\r\n                  isLoading={isLoading}\r\n                  setImgLoaded={setImgLoaded}\r\n                  nextClick={nextClick}\r\n                  imgLoaded={imgLoaded}\r\n                />\r\n              </>\r\n            </CSSTransition>\r\n          )}\r\n          <CSSTransition in={show} timeout={300} classNames=\"alert\">\r\n            <div\r\n              className={`${\r\n                !(\"isChooseSex\" in question[0]) ? \"main\" : \"hidden\"\r\n              }${question[0].options.length > 1 ? \" main-multiple\" : \"\"}`}\r\n            >\r\n              <>\r\n                <div className=\"question\">\r\n                  {isLoading && <Loading />}\r\n                  {!isLoading && !(\"isChooseSex\" in question[0]) && (\r\n                    <Question\r\n                      question={question}\r\n                      nextClick={nextClick}\r\n                      chooseDisplayedInfo={chooseDisplayedInfo}\r\n                      isLoading={isLoading}\r\n                      setImgLoaded={setImgLoaded}\r\n                      lose={lose}\r\n                    />\r\n                  )}\r\n                </div>\r\n\r\n                {!(\"isChooseSex\" in question[0]) && (\r\n                  <div\r\n                    className={`image${\r\n                      question[0].options.length === 1 ? \" image-down\" : \"\"\r\n                    }`}\r\n                  >\r\n                    <Image\r\n                      question={question}\r\n                      setImgLoaded={setImgLoaded}\r\n                      isLoading={isLoading}\r\n                      imgLoaded={imgLoaded}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </>\r\n            </div>\r\n          </CSSTransition>\r\n        </div>\r\n      </>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gameplay;\r\n","C:\\Programming\\revolution-text-game\\src\\components\\GamePage\\Creators.js",[],{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","severity":1,"message":"237","line":2,"column":50,"nodeType":"238","messageId":"239","endLine":2,"endColumn":54},{"ruleId":"236","severity":1,"message":"240","line":6,"column":22,"nodeType":"238","messageId":"239","endLine":6,"endColumn":35},{"ruleId":"236","severity":1,"message":"241","line":1,"column":17,"nodeType":"238","messageId":"239","endLine":1,"endColumn":27},{"ruleId":"236","severity":1,"message":"242","line":2,"column":31,"nodeType":"238","messageId":"239","endLine":2,"endColumn":37},{"ruleId":"236","severity":1,"message":"243","line":3,"column":35,"nodeType":"238","messageId":"239","endLine":3,"endColumn":41},{"ruleId":"236","severity":1,"message":"244","line":3,"column":43,"nodeType":"238","messageId":"239","endLine":3,"endColumn":48},{"ruleId":"236","severity":1,"message":"237","line":3,"column":50,"nodeType":"238","messageId":"239","endLine":3,"endColumn":54},{"ruleId":"236","severity":1,"message":"245","line":11,"column":10,"nodeType":"238","messageId":"239","endLine":11,"endColumn":22},{"ruleId":"236","severity":1,"message":"246","line":25,"column":10,"nodeType":"238","messageId":"239","endLine":25,"endColumn":24},{"ruleId":"236","severity":1,"message":"247","line":29,"column":17,"nodeType":"238","messageId":"239","endLine":29,"endColumn":25},{"ruleId":"248","severity":1,"message":"249","line":98,"column":6,"nodeType":"250","endLine":98,"endColumn":16,"suggestions":"251"},{"ruleId":"248","severity":1,"message":"252","line":109,"column":6,"nodeType":"250","endLine":109,"endColumn":23,"suggestions":"253"},{"ruleId":"236","severity":1,"message":"254","line":2,"column":10,"nodeType":"238","messageId":"239","endLine":2,"endColumn":20},{"ruleId":"255","severity":1,"message":"256","line":13,"column":9,"nodeType":"257","endLine":18,"endColumn":10},{"ruleId":"255","severity":1,"message":"256","line":38,"column":9,"nodeType":"257","endLine":43,"endColumn":10},{"ruleId":"258","severity":1,"message":"259","line":101,"column":23,"nodeType":"238","messageId":"260","endLine":101,"endColumn":35},{"ruleId":"261","severity":1,"message":"262","line":16,"column":30,"nodeType":"263","messageId":"264","endLine":16,"endColumn":32},{"ruleId":"261","severity":1,"message":"262","line":17,"column":48,"nodeType":"263","messageId":"264","endLine":17,"endColumn":50},{"ruleId":"236","severity":1,"message":"265","line":2,"column":10,"nodeType":"238","messageId":"239","endLine":2,"endColumn":19},{"ruleId":"232","replacedBy":"266"},{"ruleId":"234","replacedBy":"267"},{"ruleId":"236","severity":1,"message":"237","line":2,"column":50,"nodeType":"238","messageId":"239","endLine":2,"endColumn":54},{"ruleId":"236","severity":1,"message":"240","line":6,"column":22,"nodeType":"238","messageId":"239","endLine":6,"endColumn":35},{"ruleId":"236","severity":1,"message":"268","line":3,"column":10,"nodeType":"238","messageId":"239","endLine":3,"endColumn":23},{"ruleId":"236","severity":1,"message":"269","line":3,"column":25,"nodeType":"238","messageId":"239","endLine":3,"endColumn":40},{"ruleId":"236","severity":1,"message":"270","line":11,"column":10,"nodeType":"238","messageId":"239","endLine":11,"endColumn":14},{"ruleId":"232","replacedBy":"271"},{"ruleId":"234","replacedBy":"272"},{"ruleId":"236","severity":1,"message":"265","line":2,"column":10,"nodeType":"238","messageId":"239","endLine":2,"endColumn":19},{"ruleId":"236","severity":1,"message":"254","line":2,"column":10,"nodeType":"238","messageId":"239","endLine":2,"endColumn":20},{"ruleId":"236","severity":1,"message":"268","line":5,"column":10,"nodeType":"238","messageId":"239","endLine":5,"endColumn":23},{"ruleId":"236","severity":1,"message":"269","line":5,"column":25,"nodeType":"238","messageId":"239","endLine":5,"endColumn":40},{"ruleId":"236","severity":1,"message":"273","line":6,"column":10,"nodeType":"238","messageId":"239","endLine":6,"endColumn":14},{"ruleId":"236","severity":1,"message":"274","line":6,"column":16,"nodeType":"238","messageId":"239","endLine":6,"endColumn":25},{"ruleId":"255","severity":1,"message":"256","line":45,"column":9,"nodeType":"257","endLine":50,"endColumn":10},{"ruleId":"255","severity":1,"message":"256","line":127,"column":9,"nodeType":"257","endLine":132,"endColumn":10},{"ruleId":"248","severity":1,"message":"275","line":186,"column":6,"nodeType":"250","endLine":186,"endColumn":16,"suggestions":"276"},{"ruleId":"236","severity":1,"message":"277","line":6,"column":8,"nodeType":"238","messageId":"239","endLine":6,"endColumn":22},{"ruleId":"236","severity":1,"message":"268","line":7,"column":10,"nodeType":"238","messageId":"239","endLine":7,"endColumn":23},{"ruleId":"236","severity":1,"message":"269","line":7,"column":25,"nodeType":"238","messageId":"239","endLine":7,"endColumn":40},{"ruleId":"248","severity":1,"message":"278","line":100,"column":6,"nodeType":"250","endLine":100,"endColumn":32,"suggestions":"279"},{"ruleId":"236","severity":1,"message":"280","line":3,"column":27,"nodeType":"238","messageId":"239","endLine":3,"endColumn":33},{"ruleId":"236","severity":1,"message":"243","line":3,"column":35,"nodeType":"238","messageId":"239","endLine":3,"endColumn":41},{"ruleId":"236","severity":1,"message":"244","line":3,"column":43,"nodeType":"238","messageId":"239","endLine":3,"endColumn":48},{"ruleId":"236","severity":1,"message":"237","line":3,"column":50,"nodeType":"238","messageId":"239","endLine":3,"endColumn":54},{"ruleId":"236","severity":1,"message":"269","line":5,"column":25,"nodeType":"238","messageId":"239","endLine":5,"endColumn":40},{"ruleId":"236","severity":1,"message":"273","line":6,"column":10,"nodeType":"238","messageId":"239","endLine":6,"endColumn":14},{"ruleId":"236","severity":1,"message":"274","line":6,"column":16,"nodeType":"238","messageId":"239","endLine":6,"endColumn":25},{"ruleId":"236","severity":1,"message":"281","line":13,"column":8,"nodeType":"238","messageId":"239","endLine":13,"endColumn":18},{"ruleId":"236","severity":1,"message":"282","line":25,"column":10,"nodeType":"238","messageId":"239","endLine":25,"endColumn":25},{"ruleId":"236","severity":1,"message":"283","line":40,"column":9,"nodeType":"238","messageId":"239","endLine":40,"endColumn":20},{"ruleId":"236","severity":1,"message":"284","line":43,"column":12,"nodeType":"238","messageId":"239","endLine":43,"endColumn":17},{"ruleId":"236","severity":1,"message":"285","line":91,"column":15,"nodeType":"238","messageId":"239","endLine":91,"endColumn":19},{"ruleId":"248","severity":1,"message":"286","line":110,"column":6,"nodeType":"250","endLine":110,"endColumn":16,"suggestions":"287"},{"ruleId":"248","severity":1,"message":"288","line":124,"column":6,"nodeType":"250","endLine":124,"endColumn":23,"suggestions":"289"},"no-native-reassign",["290"],"no-negated-in-lhs",["291"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'setPasswordOK' is assigned a value but never used.","'useReducer' is defined but never used.","'useRef' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'INFOSReducer' is defined but never used.","'isShowQuestion' is assigned a value but never used.","'setGrade' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkOptions'. Either include it or remove the dependency array.","ArrayExpression",["292"],"React Hook useEffect has missing dependencies: 'addINFO', 'question', and 'setShowQuestionSatus'. Either include them or remove the dependency array.",["293"],"'BsQuestion' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-redeclare","'jumpFromHere' is already defined.","redeclared","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'FaSpinner' is defined but never used.",["290"],["291"],"'CSSTransition' is defined but never used.","'TransitionGroup' is defined but never used.","'show' is assigned a value but never used.",["290"],["291"],"'Fade' is defined but never used.","'Transform' is defined but never used.","React Hook useEffect has missing dependencies: 'determineArrowsNumber' and 'determineTextSmall'. Either include them or remove the dependency array.",["294"],"'ReactDOMServer' is defined but never used.","React Hook useEffect has a missing dependency: 'addNewPeriod'. Either include it or remove the dependency array.",["295"],"'Router' is defined but never used.","'LoseScreen' is defined but never used.","'questionChanged' is assigned a value but never used.","'forceUpdate' is assigned a value but never used.","'state' is assigned a value but never used.","'time' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkOptions' and 'jump'. Either include them or remove the dependency array.",["296"],"React Hook useEffect has missing dependencies: 'addINFO' and 'question'. Either include them or remove the dependency array.",["297"],"no-global-assign","no-unsafe-negation",{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},{"desc":"306","fix":"307"},{"desc":"308","fix":"309"},"Update the dependencies array to be: [checkOptions, question]",{"range":"310","text":"311"},"Update the dependencies array to be: [addINFO, question, questionCounter, setShowQuestionSatus]",{"range":"312","text":"313"},"Update the dependencies array to be: [determineArrowsNumber, determineTextSmall, question]",{"range":"314","text":"315"},"Update the dependencies array to be: [questionCounter, counter, addNewPeriod]",{"range":"316","text":"317"},"Update the dependencies array to be: [checkOptions, jump, question]",{"range":"318","text":"319"},"Update the dependencies array to be: [addINFO, question, questionCounter]",{"range":"320","text":"321"},[3265,3275],"[checkOptions, question]",[3484,3501],"[addINFO, question, questionCounter, setShowQuestionSatus]",[5735,5745],"[determineArrowsNumber, determineTextSmall, question]",[3243,3269],"[questionCounter, counter, addNewPeriod]",[3702,3712],"[checkOptions, jump, question]",[4076,4093],"[addINFO, question, questionCounter]"]