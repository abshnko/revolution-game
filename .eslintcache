[{"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\index.js":"1","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\App.js":"2","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\data.js":"3","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\reducer.js":"4","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\periods.js":"5","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\AdminPage.js":"6","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\GamePage.js":"7","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\Question.js":"8","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\CurrentInfo.js":"9","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\Image.js":"10","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\InfoColumn.js":"11","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\LoseScreen.js":"12","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\Loading.js":"13","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\editing.js":"14","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\allQuestions.js":"15","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\currentQuestion.js":"16","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\newQuestion.js":"17","C:\\Programming\\revolution-text-game\\client\\src\\index.js":"18","C:\\Programming\\revolution-text-game\\client\\src\\App.js":"19","C:\\Programming\\revolution-text-game\\client\\src\\reducers\\index.js":"20","C:\\Programming\\revolution-text-game\\client\\src\\data.js":"21","C:\\Programming\\revolution-text-game\\client\\src\\actions\\questions.js":"22","C:\\Programming\\revolution-text-game\\client\\src\\components\\AdminPage\\AdminPage.js":"23","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Rules.js":"24","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Creators.js":"25","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\GamePage.js":"26","C:\\Programming\\revolution-text-game\\client\\src\\reducers\\questions.js":"27","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Gameplay.js":"28","C:\\Programming\\revolution-text-game\\client\\src\\constants\\actionTypes.js":"29","C:\\Programming\\revolution-text-game\\client\\src\\components\\AdminPage\\EditingPage\\editing.js":"30","C:\\Programming\\revolution-text-game\\client\\src\\api\\index.js":"31","C:\\Programming\\revolution-text-game\\client\\src\\periods.js":"32","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\CurrentInfo.js":"33","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\ChooseSex.js":"34","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\LoseScreen.js":"35","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Question.js":"36","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Image.js":"37","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Timeline.js":"38","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Loading.js":"39","C:\\Programming\\revolution-text-game\\client\\src\\components\\AdminPage\\EditingPage\\newQuestion.js":"40","C:\\Programming\\revolution-text-game\\client\\src\\components\\AdminPage\\EditingPage\\allQuestions.js":"41","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Editing\\QuestionMap.js":"42","C:\\Programming\\revolution-text-game\\client\\src\\components\\AdminPage\\EditingPage\\currentQuestion.js":"43","C:\\Programming\\revolution-text-game\\client\\src\\utils\\notifyers.js":"44","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Editing\\EditQuestion.js":"45","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Editing\\AddOptions.js":"46","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Editing\\AddInfosQuestion.js":"47","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Editing\\AddInfosOptions.js":"48"},{"size":197,"mtime":1622542163094,"results":"49","hashOfConfig":"50"},{"size":568,"mtime":1625170991523,"results":"51","hashOfConfig":"50"},{"size":157918,"mtime":1625233920935,"results":"52","hashOfConfig":"50"},{"size":2407,"mtime":1622619858785,"results":"53","hashOfConfig":"50"},{"size":372,"mtime":1622627194852,"results":"54","hashOfConfig":"50"},{"size":608,"mtime":1625171018511,"results":"55","hashOfConfig":"50"},{"size":8495,"mtime":1625170982188,"results":"56","hashOfConfig":"50"},{"size":4406,"mtime":1624717023143,"results":"57","hashOfConfig":"50"},{"size":1109,"mtime":1624717001034,"results":"58","hashOfConfig":"50"},{"size":492,"mtime":1624717000814,"results":"59","hashOfConfig":"50"},{"size":1031,"mtime":1624717000686,"results":"60","hashOfConfig":"50"},{"size":295,"mtime":1624717000143,"results":"61","hashOfConfig":"50"},{"size":284,"mtime":1624717000527,"results":"62","hashOfConfig":"50"},{"size":1234,"mtime":1625253501772,"results":"63","hashOfConfig":"50"},{"size":795,"mtime":1625235504649,"results":"64","hashOfConfig":"50"},{"size":4946,"mtime":1625310646523,"results":"65","hashOfConfig":"50"},{"size":226,"mtime":1625235328239,"results":"66","hashOfConfig":"50"},{"size":589,"mtime":1642324069373,"results":"67","hashOfConfig":"68"},{"size":1963,"mtime":1642324232541,"results":"69","hashOfConfig":"68"},{"size":146,"mtime":1641728648825,"results":"70","hashOfConfig":"68"},{"size":238711,"mtime":1641647866882,"results":"71","hashOfConfig":"68"},{"size":1049,"mtime":1642243674850,"results":"72","hashOfConfig":"68"},{"size":2333,"mtime":1642324482258,"results":"73","hashOfConfig":"68"},{"size":3101,"mtime":1642324538090,"results":"74","hashOfConfig":"68"},{"size":3144,"mtime":1640717132914,"results":"75","hashOfConfig":"68"},{"size":2928,"mtime":1642014689268,"results":"76","hashOfConfig":"68"},{"size":592,"mtime":1642243790712,"results":"77","hashOfConfig":"68"},{"size":26722,"mtime":1642242512300,"results":"78","hashOfConfig":"68"},{"size":138,"mtime":1642243507277,"results":"79","hashOfConfig":"68"},{"size":1234,"mtime":1629127719389,"results":"80","hashOfConfig":"68"},{"size":401,"mtime":1642274937010,"results":"81","hashOfConfig":"68"},{"size":372,"mtime":1638172571328,"results":"82","hashOfConfig":"68"},{"size":1803,"mtime":1642148617494,"results":"83","hashOfConfig":"68"},{"size":1942,"mtime":1640458155709,"results":"84","hashOfConfig":"68"},{"size":588,"mtime":1636288283291,"results":"85","hashOfConfig":"68"},{"size":15486,"mtime":1642172385843,"results":"86","hashOfConfig":"68"},{"size":698,"mtime":1642150284616,"results":"87","hashOfConfig":"68"},{"size":4242,"mtime":1639074403980,"results":"88","hashOfConfig":"68"},{"size":284,"mtime":1624717000527,"results":"89","hashOfConfig":"68"},{"size":226,"mtime":1625235328239,"results":"90","hashOfConfig":"68"},{"size":795,"mtime":1625235504649,"results":"91","hashOfConfig":"68"},{"size":12672,"mtime":1642242433436,"results":"92","hashOfConfig":"68"},{"size":4946,"mtime":1625310646523,"results":"93","hashOfConfig":"68"},{"size":959,"mtime":1642278821076,"results":"94","hashOfConfig":"68"},{"size":26406,"mtime":1642242116163,"results":"95","hashOfConfig":"68"},{"size":12889,"mtime":1642241158190,"results":"96","hashOfConfig":"68"},{"size":4141,"mtime":1642071808413,"results":"97","hashOfConfig":"68"},{"size":4281,"mtime":1642151169937,"results":"98","hashOfConfig":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},"l6ohlv",{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"101"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"101"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"101"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"mpdg1o",{"filePath":"139","messages":"140","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"143"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"143"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"143"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"143"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"143"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"143"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"143"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\index.js",[],["206","207"],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\App.js",["208"],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\data.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\reducer.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\periods.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\AdminPage.js",["209"],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\GamePage.js",["210","211","212","213","214","215","216","217","218","219"],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\Question.js",["220","221","222","223"],"import React from \"react\";\r\nimport { BsQuestion } from \"react-icons/bs\";\r\n\r\nconst Question = ({ question, nextClick, chooseDisplayedInfo }) => {\r\n  const checkInfosForOptions = (option) => {\r\n    if (!option.infos) return option.text;\r\n    let allId = option.infos.map((e) => e.id);\r\n    let allText = option.infos.map((e) => e.altText);\r\n\r\n    const l = (parts, i) => {\r\n      //для верной передачи цифр\r\n      return (\r\n        <a\r\n          className=\"info-link\"\r\n          onClick={() => {\r\n            chooseDisplayedInfo(allId[Math.floor(i / 2)]);\r\n          }}\r\n        >\r\n          {parts[i]}\r\n        </a>\r\n      );\r\n    };\r\n    let parts = option.text.split(new RegExp(`(${allText.join(\"|\")})`));\r\n    for (let i = 1; i < parts.length; i += 2) {\r\n      parts[i] = l(parts, i);\r\n    }\r\n    return parts;\r\n  };\r\n\r\n  const checkInfosForQuestion = (question) => {\r\n    if (!question[0].infos) return <h2>{question[0].text}</h2>;\r\n    let allId = question[0].infos.map((e) => e.id);\r\n    let allText = question[0].infos.map((e) => e.altText);\r\n\r\n    const l = (parts, i) => {\r\n      //для верной передачи цифр\r\n      return (\r\n        <a\r\n          className=\"info-link\"\r\n          onClick={() => {\r\n            chooseDisplayedInfo(allId[Math.floor(i / 2)]);\r\n          }}\r\n        >\r\n          {parts[i]}\r\n        </a>\r\n      );\r\n    };\r\n    let parts = question[0].text.split(new RegExp(`(${allText.join(\"|\")})`));\r\n    console.log(parts);\r\n    for (let i = 1; i < parts.length; i += 2) {\r\n      parts[i] = l(parts, i);\r\n    }\r\n    return <h2>{parts}</h2>;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {question[0].imgRef !== \"\" && (\r\n        <div className=\"img-ref\">\r\n          <a href={question[0].imgRef}>источник</a>\r\n        </div>\r\n      )}\r\n      {/* <div className=\"id-testing\">current: {question[0].id}</div> */}{\" \"}\r\n      {/*testing */}\r\n      <div className=\"question\">{checkInfosForQuestion(question)}</div>\r\n      {question[0].options.length > 1 && (\r\n        <div className=\"options\">\r\n          <div className=\"option-container\">\r\n            {question[0].options.map((option) => {\r\n              if (\"nextJump\" in option) {\r\n                if (\"jumpFromHere\" in option) {\r\n                  var jumpFromHere = option.jumpFromHere;\r\n                }\r\n                const nextJump = option.nextJump;\r\n                const next = option.next;\r\n                return (\r\n                  <>\r\n                    {/*testing*/}\r\n                    {/* <div className=\"next-option-testing\">\r\n                      nextJump: {option.nextJump}\r\n                    </div> */}\r\n                    <button\r\n                      className={`option ${option.isActive ? \"active\" : \"\"}`}\r\n                      key={option.id}\r\n                      onClick={() =>\r\n                        nextClick(\r\n                          option.id,\r\n                          option.isActive,\r\n                          next,\r\n                          nextJump,\r\n                          jumpFromHere\r\n                        )\r\n                      }\r\n                    >\r\n                      {checkInfosForOptions(option)}\r\n                    </button>\r\n                  </>\r\n                );\r\n              } else {\r\n                if (\"jumpFromHere\" in option) {\r\n                  var jumpFromHere = option.jumpFromHere;\r\n                }\r\n                const next = option.next;\r\n                return (\r\n                  <>\r\n                    {/*testing*/}\r\n                    {/* <div className=\"next-option-testing\">\r\n                      next: {option.next}\r\n                    </div> */}\r\n                    <button\r\n                      className={`option ${option.isActive ? \"active\" : \"\"}`}\r\n                      key={option.id}\r\n                      onClick={() =>\r\n                        nextClick(\r\n                          option.id,\r\n                          option.isActive,\r\n                          next,\r\n                          0,\r\n                          jumpFromHere\r\n                        )\r\n                      }\r\n                    >\r\n                      {checkInfosForOptions(option)}\r\n                    </button>\r\n                  </>\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\CurrentInfo.js",["224","225"],"import React from \"react\";\r\nimport { AiOutlineClose } from \"react-icons/ai\";\r\n\r\nconst CurrentInfo = ({\r\n  question,\r\n  setIsShowInfo,\r\n  INFOS,\r\n  currentInfoDisplayed,\r\n}) => {\r\n  return (\r\n    <div className=\"card\" id={question[0].id}>\r\n      <div className=\"close-info\">\r\n        <button\r\n          onClick={() => {\r\n            setIsShowInfo(false);\r\n            INFOS.map((INFO) => {\r\n              INFO.infos.map((info, infoIndex) => {\r\n                info.isActive = false;\r\n              });\r\n            });\r\n          }}\r\n        >\r\n          <i>\r\n            <AiOutlineClose />\r\n          </i>\r\n        </button>\r\n      </div>\r\n      <div className=\"current-info\">\r\n        <div className=\"infoName\">\r\n          <h2>{currentInfoDisplayed.infoName}</h2>\r\n        </div>\r\n        {/* <div className=\"img-container\">\r\n                  <img className=\"headImage\" src={placeholder} alt=\"img here\" />\r\n                </div> */}\r\n\r\n        <div className=\"info-text\">\r\n          <p>{currentInfoDisplayed.infoText}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentInfo;\r\n","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\Image.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\InfoColumn.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\LoseScreen.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\GamePage\\Loading.js",["226"],"import React from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { CgSpinner } from \"react-icons/cg\";\r\n\r\nfunction Loading(props) {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <i>\r\n        <CgSpinner />\r\n      </i>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\editing.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\allQuestions.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\currentQuestion.js",[],"C:\\Dasha's Files\\Programming\\revolution-text-game\\src\\components\\AdminPage\\EditingPage\\newQuestion.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\index.js",["227"],"C:\\Programming\\revolution-text-game\\client\\src\\App.js",["228","229","230","231","232","233"],"C:\\Programming\\revolution-text-game\\client\\src\\reducers\\index.js",[],["234","235"],"C:\\Programming\\revolution-text-game\\client\\src\\data.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\actions\\questions.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\components\\AdminPage\\AdminPage.js",["236","237","238","239","240","241"],"C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Rules.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Creators.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\GamePage.js",["242","243","244","245","246","247","248","249","250"],"import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  getQuestions,\r\n  createQuestion,\r\n  updateQuestion,\r\n  deleteQuestion,\r\n} from \"../../actions/questions\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"../../styles/main/style.css\";\r\n\r\nimport Rules from \"./Rules\";\r\nimport Gameplay from \"./Gameplay\";\r\nimport Creators from \"./Creators\";\r\n\r\nfunction GamePage({ questions, adminMode, setAdminMode }) {\r\n  const initialState = {\r\n    text: \"\",\r\n    year: \"\",\r\n    id: 0,\r\n    period: \"\",\r\n    img: \"\",\r\n    options: [],\r\n    isInfo: false,\r\n    infos: [],\r\n  };\r\n  const dispatch = useDispatch();\r\n  const [currentQuestionID, setCurrentQuestionID] = useState(null);\r\n  const questionToUpdate = useSelector((store) =>\r\n    currentQuestionID\r\n      ? store.questions.find((question) => question._id === currentQuestionID)\r\n      : null\r\n  );\r\n  const [questionInitialState, setQuestionInitialState] = useState(\r\n    questionToUpdate ? questionToUpdate : initialState\r\n  );\r\n  const [showModalQuestion, setShowModalQuestion] = useState(false);\r\n  const [alertDeleteQuestion, setAlertDeleteQuestion] = useState(false);\r\n  const [idForDelete, setIdForDelete] = useState(null);\r\n\r\n  //   const [currentOptionID, setCurrentOptionID] = useState(null);\r\n  //   const [currentInfoID, setCurrentInfoID] = useState(null);\r\n\r\n  //  const questions = useSelector((store) => store.questions);\r\n\r\n  //   const [showModalOptions, setShowModalOptions] = useState(false);\r\n  //   const [showInfos, setShowInfos] = useState(false);\r\n  //   const optionToUpdate = currentOptionID\r\n  //     ? question.options.find((option) => option.id === currentOptionID)\r\n  //     : null;\r\n\r\n  //   const [alertDeleteInfos, setAlertDeleteInfos] = useState(false);\r\n  //   const [imgLoaded, setImgLoaded] = useState(false);\r\n  //   const [line, setLine] = useState(\"unset\");\r\n\r\n  return (\r\n    <>\r\n      <div className=\"game-page\">\r\n        <Gameplay\r\n          dispatch={dispatch}\r\n          questions={questions}\r\n          adminMode={adminMode}\r\n          setAdminMode={setAdminMode}\r\n          setCurrentQuestionID={setCurrentQuestionID}\r\n          setShowModalQuestion={setShowModalQuestion}\r\n          showModalQuestion={showModalQuestion}\r\n          setIdForDelete={setIdForDelete}\r\n          setAlertDeleteQuestion={setAlertDeleteQuestion}\r\n          questionToUpdate={questionToUpdate}\r\n          alertDeleteQuestion={alertDeleteQuestion}\r\n          idForDelete={idForDelete}\r\n          initialState={initialState}\r\n          currentQuestionID={currentQuestionID}\r\n          questionInitialState={questionInitialState}\r\n          setQuestionInitialState={setQuestionInitialState}\r\n          deleteQuestion={deleteQuestion}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GamePage;\r\n","C:\\Programming\\revolution-text-game\\client\\src\\reducers\\questions.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Gameplay.js",["251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269"],"import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport \"../../styles/main/style.css\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { AiFillEdit } from \"react-icons/ai\";\r\nimport { Fade, Transform } from \"react-animation-components\";\r\nimport periods from \"../../periods\";\r\nimport Question from \"./Question\";\r\nimport Image from \"./Image\";\r\nimport CurrentInfo from \"./CurrentInfo\";\r\nimport Loading from \"./Loading\";\r\nimport ChooseSex from \"./ChooseSex\";\r\nimport LoseScreen from \"./LoseScreen\";\r\nimport Timeline from \"./Timeline\";\r\nimport EditQuestion from \"./Editing/EditQuestion\";\r\nimport QuestionMap from \"./Editing/QuestionMap\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { notifyAboutDelete } from \"../../utils/notifyers\";\r\n\r\nconst Gameplay = ({\r\n  questions,\r\n  adminMode,\r\n  setAdminMode,\r\n  setCurrentQuestionID,\r\n  setShowModalQuestion,\r\n  showModalQuestion,\r\n  setIdForDelete,\r\n  setAlertDeleteQuestion,\r\n  dispatch,\r\n  questionToUpdate,\r\n  alertDeleteQuestion,\r\n  idForDelete,\r\n  initialState,\r\n  currentQuestionID,\r\n  questionInitialState,\r\n  setQuestionInitialState,\r\n  deleteQuestion,\r\n}) => {\r\n  const [index, setIndex] = useState(1000);\r\n  const [rememberIndex, setRememberIndex] = useState(1000);\r\n  const [show, setShow] = useState(false);\r\n  const [showInfo, setShowInfo] = useState(false);\r\n  const [question, setQuestion] = useState(() => {\r\n    const saved = localStorage.getItem(\"question\");\r\n    const initialValue = JSON.parse(saved);\r\n    if (initialValue !== null) {\r\n      return initialValue;\r\n    } else if (questions.length !== 0) {\r\n      return questions;\r\n    } else return [];\r\n  }); //   const [questionState, setquestionState] = useState(question[0]);\r\n  console.log(questions);\r\n  const [questionChanged, setQuestionChanged] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [indexChanged, setIndexChanged] = useState(false);\r\n  const [isShowInfo, setIsShowInfo] = useState(false);\r\n  const [INFOS, setINFOS] = useState(periods);\r\n  const [questionCounter, setQuestionCounter] = useState(() => {\r\n    const counter = parseInt(localStorage.getItem(\"question-number\"));\r\n    return counter || 0;\r\n  });\r\n\r\n  const [isJump, setIsJump] = useState(false);\r\n  const [jump, setJump] = useState(0);\r\n  //   const [isShowQuestion, setIsShowQuestion] = useState(true);\r\n  const [imgLoaded, setImgLoaded] = useState(false);\r\n  const [currentInfoDisplayed, setCurrentInfoDisplayed] = useState();\r\n  const [lose, setLose] = useState(false);\r\n  const forceUpdate = useForceUpdate();\r\n  const [showQuestionMap, setShowQuestionMap] = useState(false);\r\n  //   const [curQuestionInAdminMode, setCurQuestionInAdminMode] = useState()\r\n\r\n  function useForceUpdate() {\r\n    const [state, setState] = useState(0);\r\n    return () => setState((state) => state + 1);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const questionOnRememberedIndex = questions.filter(\r\n      (item) => item.id === rememberIndex\r\n    );\r\n    if (questionOnRememberedIndex.length > 0) {\r\n      setQuestion(questions.filter((item) => item.id === rememberIndex));\r\n    } else {\r\n      setQuestion(questions);\r\n    }\r\n  }, [questions]);\r\n\r\n  //   const addInfoHelper = (singleInfo) => {\r\n  //     const i = INFOS.findIndex(\r\n  //       (infoObj) => infoObj.period === question[0].period\r\n  //     );\r\n  //     INFOS.forEach((INFO) => {\r\n  //       INFO.isShowEntries = false;\r\n  //     });\r\n  //     const newINFO = {\r\n  //       infoId: singleInfo.id,\r\n  //       infoName: singleInfo.name,\r\n  //       infoText: singleInfo.text,\r\n  //       infoImg: singleInfo.img,\r\n  //       isActive: false,\r\n  //     };\r\n  //     if (i !== -1) {\r\n  //       var infosArray = INFOS[i].infos;\r\n  //     }\r\n  //     infosArray.push(newINFO);\r\n  //     const newObj = { ...INFOS[i], infos: infosArray, isShowEntries: true };\r\n  //     const newArray = INFOS;\r\n  //     newArray[i] = newObj;\r\n  //     setINFOS(newArray);\r\n  //     console.log(INFOS);\r\n  //   };\r\n\r\n  //   const addINFO = () => {\r\n  //     if (\"infos\" in question[0]) {\r\n  //       question[0].infos.forEach((singleInfo) => {\r\n  //         // addInfoHelper(singleInfo);\r\n  //       });\r\n  //     }\r\n  //     question[0].options.forEach((option) => {\r\n  //       if (\"infos\" in option) {\r\n  //         option.infos.forEach((singleInfo) => {\r\n  //           //   addInfoHelper(singleInfo);\r\n  //         });\r\n  //       }\r\n  //     });\r\n  //   };\r\n\r\n  const handleClick = () => {\r\n    if (!isShowInfo) {\r\n      if (index !== question[0].id) {\r\n        setShow(false);\r\n        const time = setTimeout(() => {\r\n          setImgLoaded(false);\r\n          setIsLoading(true);\r\n          setQuestion(questions.filter((item) => item.id === index));\r\n          //   setquestionState(questions.filter((item) => item.id === index)); /////GET RID OF IT LATER\r\n          setQuestionCounter(questionCounter + 1);\r\n          setQuestionChanged(true);\r\n          setQuestionChanged(false);\r\n          setIndexChanged(false);\r\n        }, 100);\r\n        // return clearTimeout(time);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (questions.length !== 0) {\r\n      checkOptions();\r\n    }\r\n    // setShow(true);\r\n    console.log(question[0]);\r\n    console.log(\"NEXT JUMP: \", jump);\r\n    console.log(rememberIndex);\r\n    if (question[0] !== undefined) {\r\n      if (\"lose\" in question[0]) {\r\n        setLose(true);\r\n      } else {\r\n        setLose(false);\r\n      }\r\n      setRememberIndex(question[0].id);\r\n    }\r\n  }, [question]);\r\n\r\n  useEffect(() => {\r\n    if (questions.length !== 0) {\r\n      //   addINFO();\r\n      // setShowQuestionSatus();\r\n      if (question[0].img === \"\") {\r\n        setImgLoaded(true);\r\n      }\r\n      //   if (\"lose\" in question[0]) {\r\n      //     setLose(true);\r\n      //   }\r\n    }\r\n\r\n    // localStorage.setItem(\"question\", JSON.stringify(question));\r\n    // localStorage.setItem(\"question-number\", JSON.stringify(questionCounter));\r\n  }, [questionCounter]);\r\n\r\n  useEffect(() => {\r\n    const time = setTimeout(() => {\r\n      if (imgLoaded) {\r\n        setIsLoading(false);\r\n        // setShow(true);\r\n      }\r\n    }, 100);\r\n    return () => clearTimeout(time);\r\n  }, [imgLoaded]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"isLOADING: \", isLoading);\r\n    isLoading ? setShow(false) : setShow(true);\r\n  }, [isLoading]);\r\n\r\n  useEffect(() => {\r\n    console.log(question[0]);\r\n  });\r\n\r\n  const nextClick = (id, isActive, next, nextJump, jumpFromHere) => {\r\n    if (nextJump !== 0) {\r\n      setJump(nextJump);\r\n    }\r\n    if (jumpFromHere) setIsJump(true);\r\n    setIndex(next);\r\n\r\n    //change active option\r\n    const i = question[0].options.findIndex((option) => option.id === id);\r\n    const clone = [...question[0].options];\r\n    clone[i] = { ...clone[i], isActive: true };\r\n    const objClone = [...question];\r\n    objClone[0] = { ...question[0], options: clone };\r\n\r\n    setQuestion(objClone);\r\n    question[0].options.forEach((option) => {\r\n      option.isActive = false;\r\n    });\r\n    setIndexChanged(true);\r\n    console.log(\"BEEN IN NEXT CLICK\");\r\n  };\r\n\r\n  //   const chooseDisplayedInfo = (infoId) => {\r\n  //     //check active info\r\n  //     //переделать без INFOS. просто по id выставлять currentInfo\r\n  //     INFOS.forEach((INFO, INFOindex) => {\r\n  //       const i = INFO.infos.findIndex((info) => info.infoId === infoId);\r\n  //       if (i !== -1) {\r\n  //         INFO.infos.forEach((info, infoIndex) => {\r\n  //           const arrayInfos = [...INFO.infos];\r\n  //           arrayInfos[i] = { ...arrayInfos[i], isActive: true };\r\n  //           setCurrentInfoDisplayed(arrayInfos[i]);\r\n  //           setIsShowInfo(true);\r\n  //           const INFOArrCLone = [...INFOS];\r\n  //           INFOArrCLone[INFOindex] = {\r\n  //             ...INFOArrCLone[INFOindex],\r\n  //             infos: arrayInfos,\r\n  //           };\r\n  //           setINFOS(INFOArrCLone);\r\n  //         });\r\n  //       }\r\n  //       INFO.infos.forEach((info) => {\r\n  //         info.isActive = false;\r\n  //       });\r\n  //     });\r\n  //     console.log(\"CURRENT INFO: \", currentInfoDisplayed);\r\n  //   };\r\n\r\n  //check if there's more than one option = it's a question, otherwise =it's an announcement\r\n  const checkOptions = () => {\r\n    if (question[0].options.length === 1) {\r\n      if (isJump) {\r\n        setIndex(jump);\r\n        setIsJump(false);\r\n      } else if (\"jumpFromHere\" in question[0].options[0]) {\r\n        setIsJump(true);\r\n        setIndex(question[0].options[0].next);\r\n      } else {\r\n        setIndex(question[0].options[0].next);\r\n      }\r\n      console.log(\"BEEN IN CHECK OPTIONS!!!!\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(currentInfoDisplayed);\r\n  }, [currentInfoDisplayed]);\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <>\r\n        {question.length === 0 ? (\r\n          <Loading />\r\n        ) : (\r\n          <div className=\"container\">\r\n            <div className=\"timeline\">\r\n              <Timeline\r\n                latestPeriod={question[0].period}\r\n                questionCounter={questionCounter}\r\n              />\r\n            </div>\r\n            {isShowInfo && //show currently chosen info entry\r\n              currentInfoDisplayed !== undefined && (\r\n                <CSSTransition in={isShowInfo} timeout={300} classNames=\"alert\">\r\n                  <CurrentInfo\r\n                    question={question}\r\n                    setIsShowInfo={setIsShowInfo}\r\n                    INFOS={INFOS}\r\n                    currentInfoDisplayed={currentInfoDisplayed}\r\n                    //   questionState={questionState}\r\n                  />\r\n                </CSSTransition>\r\n              )}\r\n            <div className=\"controls\">\r\n              {/*refactor */}\r\n              <div className=\"infos\">\r\n                {\"infos\" in question[0]\r\n                  ? question[0].infos.map((info) => {\r\n                      return (\r\n                        <div\r\n                          className=\"info\"\r\n                          //   onClick={() => chooseDisplayedInfo(info.id)}\r\n                          onClick={() => {\r\n                            setCurrentInfoDisplayed(info);\r\n                            setIsShowInfo(true);\r\n                          }}\r\n                        >\r\n                          <svg\r\n                            width=\"12\"\r\n                            height=\"10\"\r\n                            viewBox=\"0 0 12 10\"\r\n                            fill=\"none\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                          >\r\n                            <path\r\n                              d=\"M11.3247 4.90503L0.0747066 9.66817L0.074707 0.141889L11.3247 4.90503Z\"\r\n                              fill=\"black\"\r\n                            />\r\n                          </svg>\r\n                          {info.name}\r\n                        </div>\r\n                      );\r\n                    })\r\n                  : null}\r\n\r\n                {question[0].options.map((option) => {\r\n                  if (\"infos\" in option) {\r\n                    let infos = [];\r\n                    infos = option.infos.map((info) => {\r\n                      return (\r\n                        <div\r\n                          className=\"info\"\r\n                          //   onClick={() => chooseDisplayedInfo(info.id)}\r\n                          onClick={() => {\r\n                            setCurrentInfoDisplayed(info);\r\n                            setIsShowInfo(true);\r\n                          }}\r\n                        >\r\n                          <svg\r\n                            width=\"12\"\r\n                            height=\"10\"\r\n                            viewBox=\"0 0 12 10\"\r\n                            fill=\"none\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                          >\r\n                            <path\r\n                              d=\"M11.3247 4.90503L0.0747066 9.66817L0.074707 0.141889L11.3247 4.90503Z\"\r\n                              fill=\"black\"\r\n                            />\r\n                          </svg>\r\n                          {info.name}\r\n                        </div>\r\n                      );\r\n                    });\r\n                    return infos;\r\n                  }\r\n                  return null;\r\n                })}\r\n              </div>\r\n              <div className=\"year\">\r\n                {question[0].year}\r\n                <p>Человек в эпоху войн и&nbsp;революций</p>\r\n              </div>\r\n              {!lose && (\r\n                <div className=\"next\">\r\n                  <button\r\n                    className={`next-button ${\r\n                      indexChanged || question[0].options.length === 1\r\n                        ? \"next-button-changed\"\r\n                        : \"\"\r\n                    }`}\r\n                    onClick={() => {\r\n                      handleClick();\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={process.env.PUBLIC_URL + `/images/red-arrow.png`}\r\n                      alt=\"arrow\"\r\n                    />\r\n                  </button>\r\n                  <p>следующий вопрос</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"line\">\r\n              <hr />\r\n              {/* <button\r\n                      onClick={() => setShow(!show)}\r\n                    >{`SHOW: ${show}`}</button>\r\n                    <p>{`imgLoaded: ${imgLoaded}, isLoading: ${isLoading}`}</p> */}\r\n            </div>\r\n            <div className=\"question-number\">\r\n              <div className=\"buttons\">\r\n                {!adminMode ? (\r\n                  questionCounter !== 0 ? (\r\n                    <>\r\n                      <span>{questionCounter}</span> вопрос\r\n                    </>\r\n                  ) : (\r\n                    \"Начало игры\"\r\n                  )\r\n                ) : (\r\n                  <span>{question[0].id}</span>\r\n                )}\r\n                {adminMode && (\r\n                  <>\r\n                    <button\r\n                      className=\"edit-question\"\r\n                      onClick={() => {\r\n                        // if (questionInitialState.id === 0) {\r\n                        //   let temp = 1000;\r\n                        //   if (questions.length > 0) {\r\n                        //     questions.forEach((x) => {\r\n                        //       if (x.id > temp) {\r\n                        //         temp = x.id;\r\n                        //       }\r\n                        //     });\r\n                        //   }\r\n                        //   setQuestionInitialState({\r\n                        //     ...questionInitialState,\r\n                        //     id: temp + 1,\r\n                        //   });\r\n                        // }\r\n                        setCurrentQuestionID(question[0]._id);\r\n                        setShowModalQuestion(true);\r\n                      }}\r\n                    >\r\n                      <div className=\"\">Редактировать вопрос</div>\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        class=\"icon icon-tabler icon-tabler-edit\"\r\n                        width=\"26\"\r\n                        height=\"26\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        stroke-width=\"2\"\r\n                        stroke=\"#d4d4d4\"\r\n                        fill=\"none\"\r\n                        stroke-linecap=\"round\"\r\n                        stroke-linejoin=\"round\"\r\n                      >\r\n                        <path\r\n                          stroke=\"none\"\r\n                          d=\"M0 0h24v24H0z\"\r\n                          fill=\"none\"\r\n                        ></path>\r\n                        <path d=\"M9 7h-3a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-3\"></path>\r\n                        <path d=\"M9 15h3l8.5 -8.5a1.5 1.5 0 0 0 -3 -3l-8.5 8.5v3\"></path>\r\n                        <line x1=\"16\" y1=\"5\" x2=\"19\" y2=\"8\"></line>\r\n                      </svg>\r\n                    </button>\r\n                    <button\r\n                      className=\"add-question\"\r\n                      onClick={() => {\r\n                        setShowModalQuestion(true);\r\n                      }}\r\n                    >\r\n                      <div className=\"\"> Добавить вопрос</div>\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        class=\"icon icon-tabler icon-tabler-plus\"\r\n                        width=\"35\"\r\n                        height=\"35\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        stroke-width=\"3\"\r\n                        stroke=\"#d4d4d4\"\r\n                        fill=\"#d4d4d4\"\r\n                        // stroke-linecap=\"round\"\r\n                        // stroke-linejoin=\"round\"\r\n                      >\r\n                        <path\r\n                          stroke=\"none\"\r\n                          d=\"M0 0h24v24H0z\"\r\n                          fill=\"none\"\r\n                        ></path>\r\n                        <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\r\n                        <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\r\n                      </svg>\r\n                    </button>\r\n                    <button\r\n                      className=\"delete-question\"\r\n                      onClick={() => {\r\n                        setIdForDelete(question[0]._id);\r\n                        setAlertDeleteQuestion(true);\r\n                      }}\r\n                    >\r\n                      <div>Удалить вопрос</div>\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        class=\"icon icon-tabler icon-tabler-trash\"\r\n                        width=\"26\"\r\n                        height=\"26\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        stroke-width=\"2\"\r\n                        stroke=\"#d4d4d4\"\r\n                        fill=\"none\"\r\n                        stroke-linecap=\"round\"\r\n                        stroke-linejoin=\"round\"\r\n                      >\r\n                        <path\r\n                          stroke=\"none\"\r\n                          d=\"M0 0h24v24H0z\"\r\n                          fill=\"none\"\r\n                        ></path>\r\n                        <line x1=\"4\" y1=\"7\" x2=\"20\" y2=\"7\"></line>\r\n                        <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line>\r\n                        <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line>\r\n                        <path d=\"M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12\"></path>\r\n                        <path d=\"M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3\"></path>\r\n                      </svg>\r\n                    </button>\r\n                    <button\r\n                      className=\"view-questions-map\"\r\n                      onClick={() => setShowQuestionMap(!showQuestionMap)}\r\n                    >\r\n                      <div>Карта вопросов</div>\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        class=\"icon icon-tabler icon-tabler-compass\"\r\n                        width=\"24\"\r\n                        height=\"24\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        stroke-width=\"2\"\r\n                        stroke=\"#d4d4d4\"\r\n                        fill=\"none\"\r\n                        stroke-linecap=\"round\"\r\n                        stroke-linejoin=\"round\"\r\n                      >\r\n                        <path\r\n                          stroke=\"none\"\r\n                          d=\"M0 0h24v24H0z\"\r\n                          fill=\"none\"\r\n                        ></path>\r\n                        <polyline points=\"8 16 10 10 16 8 14 14 8 16\"></polyline>\r\n                        <circle cx=\"12\" cy=\"12\" r=\"9\"></circle>\r\n                        <line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"5\"></line>\r\n                        <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"21\"></line>\r\n                        <line x1=\"3\" y1=\"12\" x2=\"5\" y2=\"12\"></line>\r\n                        <line x1=\"19\" y1=\"12\" x2=\"21\" y2=\"12\"></line>\r\n                      </svg>\r\n                    </button>\r\n                    <button\r\n                      className=\"exit-editing\"\r\n                      onClick={() => setAdminMode(false)}\r\n                    >\r\n                      <div>Завершить редактирование</div>\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        class=\"icon icon-tabler icon-tabler-logout\"\r\n                        width=\"24\"\r\n                        height=\"24\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        stroke-width=\"2\"\r\n                        stroke=\"#d4d4d4\"\r\n                        fill=\"none\"\r\n                        stroke-linecap=\"round\"\r\n                        stroke-linejoin=\"round\"\r\n                      >\r\n                        <path\r\n                          stroke=\"none\"\r\n                          d=\"M0 0h24v24H0z\"\r\n                          fill=\"none\"\r\n                        ></path>\r\n                        <path d=\"M14 8v-2a2 2 0 0 0 -2 -2h-7a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2 -2v-2\"></path>\r\n                        <path d=\"M7 12h14l-3 -3m0 6l3 -3\"></path>\r\n                      </svg>\r\n                    </button>\r\n                  </>\r\n                )}\r\n              </div>\r\n            </div>\r\n            {\"isChooseSex\" in question[0] && (\r\n              <CSSTransition in={show} timeout={5000} classNames=\"alert\">\r\n                <>\r\n                  <ChooseSex\r\n                    question={question}\r\n                    isLoading={isLoading}\r\n                    setImgLoaded={setImgLoaded}\r\n                    nextClick={nextClick}\r\n                    imgLoaded={imgLoaded}\r\n                  />\r\n                </>\r\n              </CSSTransition>\r\n            )}\r\n            <CSSTransition in={show} timeout={300} classNames=\"alert\">\r\n              <div\r\n                className={`${\r\n                  !(\"isChooseSex\" in question[0]) ? \"main\" : \"hidden\"\r\n                }${question[0].options.length > 1 ? \" main-multiple\" : \"\"}`}\r\n              >\r\n                <>\r\n                  <div className=\"question\">\r\n                    {isLoading && <Loading />}\r\n                    {!isLoading && !(\"isChooseSex\" in question[0]) && (\r\n                      <Question\r\n                        question={question}\r\n                        nextClick={nextClick}\r\n                        // chooseDisplayedInfo={chooseDisplayedInfo}\r\n                        setCurrentInfoDisplayed={setCurrentInfoDisplayed}\r\n                        currentInfoDisplayed={currentInfoDisplayed}\r\n                        setIsShowInfo={setIsShowInfo}\r\n                        isLoading={isLoading}\r\n                        setImgLoaded={setImgLoaded}\r\n                        lose={lose}\r\n                        adminMode={adminMode}\r\n                        dispatch={dispatch}\r\n                        isShowInfo={isShowInfo}\r\n                      />\r\n                    )}\r\n                  </div>\r\n\r\n                  {!(\"isChooseSex\" in question[0]) && (\r\n                    <div\r\n                      className={`image${\r\n                        question[0].options.length === 1 ? \" image-down\" : \"\"\r\n                      }`}\r\n                    >\r\n                      <Image\r\n                        question={question}\r\n                        setImgLoaded={setImgLoaded}\r\n                        isLoading={isLoading}\r\n                        imgLoaded={imgLoaded}\r\n                        adminMode={adminMode}\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </>\r\n              </div>\r\n            </CSSTransition>\r\n          </div>\r\n        )}\r\n      </>\r\n      {alertDeleteQuestion && (\r\n        <div className=\"alert-delete-modal\">\r\n          <div className=\"alert-delete-modal-content\">\r\n            <p>\r\n              Вы уверены, что хотите удалить вопрос?\r\n              <div className=\"buttons\">\r\n                <button\r\n                  onClick={() => {\r\n                    notifyAboutDelete();\r\n                    dispatch(deleteQuestion(idForDelete));\r\n                    setIdForDelete(null);\r\n                    setAlertDeleteQuestion(false);\r\n                  }}\r\n                >\r\n                  Да\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    setAlertDeleteQuestion(false);\r\n                  }}\r\n                >\r\n                  Нет\r\n                </button>\r\n              </div>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {showQuestionMap && (\r\n        <QuestionMap\r\n          questions={questions}\r\n          setCurrentQuestionID={setCurrentQuestionID}\r\n          setShowModalQuestion={setShowModalQuestion}\r\n          setAlertDeleteQuestion={setAlertDeleteQuestion}\r\n          setShowQuestionMap={setShowQuestionMap}\r\n          questionInitialState={questionInitialState}\r\n          setQuestionInitialState={setQuestionInitialState}\r\n          alertDeleteQuestion={alertDeleteQuestion}\r\n          dispatch={dispatch}\r\n          deleteQuestion={deleteQuestion}\r\n          setQuestion={setQuestion}\r\n          setIndex={setIndex}\r\n          question={question}\r\n        />\r\n      )}\r\n      {showModalQuestion && (\r\n        <EditQuestion\r\n          dispatch={dispatch}\r\n          questionToUpdate={questionToUpdate}\r\n          setQuestion={setQuestion}\r\n          //   question={question}\r\n          showModalQuestion={showModalQuestion}\r\n          questions={questions}\r\n          alertDeleteQuestion={alertDeleteQuestion}\r\n          setIdForDelete={setIdForDelete}\r\n          setAlertDeleteQuestion={setAlertDeleteQuestion}\r\n          idForDelete={idForDelete}\r\n          initialState={initialState}\r\n          setShowModalQuestion={setShowModalQuestion}\r\n          setCurrentQuestionID={setCurrentQuestionID}\r\n          currentQuestionID={currentQuestionID}\r\n          questionInitialState={questionInitialState}\r\n          setQuestionInitialState={setQuestionInitialState}\r\n          setIndex={setIndex}\r\n          question={question}\r\n        />\r\n      )}\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gameplay;\r\n","C:\\Programming\\revolution-text-game\\client\\src\\constants\\actionTypes.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\components\\AdminPage\\EditingPage\\editing.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\api\\index.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\periods.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\CurrentInfo.js",["270","271","272"],"import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nconst CurrentInfo = ({\r\n  question,\r\n  setIsShowInfo,\r\n  INFOS,\r\n  currentInfoDisplayed,\r\n}) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const style =\r\n    \"img\" in currentInfoDisplayed && currentInfoDisplayed.img !== \"\"\r\n      ? \"modal\"\r\n      : \"no-img-modal\";\r\n  return (\r\n    <>\r\n      {/* <CSSTransition\r\n        in={show}\r\n        timeout={300}\r\n        classNames=\"alert\"\r\n        component={null}\r\n      > */}\r\n      <div className={`${style}`} id={question[0].id}>\r\n        <div className=\"current-info\">\r\n          <div className=\"info-name\">\r\n            <h2>{currentInfoDisplayed.name}</h2>\r\n          </div>\r\n          <div className=\"info-text\">\r\n            <p>{currentInfoDisplayed.text}</p>\r\n          </div>\r\n          <div className=\"hr\">\r\n            <hr />\r\n          </div>\r\n        </div>\r\n        <div className=\"right-column\">\r\n          <div className=\"img\">\r\n            {currentInfoDisplayed.img !== \"\" ? (\r\n              <img\r\n                src={\r\n                  process.env.PUBLIC_URL + `/images/${currentInfoDisplayed.img}`\r\n                }\r\n                alt=\"\"\r\n                onLoad={() => setShow(true)}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          <div className=\"close-info\">\r\n            <button\r\n              onClick={() => {\r\n                setShow(false);\r\n                setTimeout(() => {\r\n                  setIsShowInfo(false);\r\n                }, 100);\r\n              }}\r\n            >\r\n              Понятно\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* </CSSTransition> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CurrentInfo;\r\n","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\ChooseSex.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\LoseScreen.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Question.js",["273","274","275","276","277","278","279","280"],"import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport LoseScreen from \"./LoseScreen\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { Fade, Transform } from \"react-animation-components\";\r\nimport { AiFillEdit } from \"react-icons/ai\";\r\n\r\nconst Question = ({\r\n  question,\r\n  nextClick,\r\n  //   chooseDisplayedInfo,\r\n  setCurrentInfoDisplayed,\r\n  currentInfoDisplayed,\r\n  setIsShowInfo,\r\n  isLoading,\r\n  setImgLoaded,\r\n  lose,\r\n  isShowInfo,\r\n}) => {\r\n  const [oneArrow, setOneArrow] = useState(false);\r\n  const [twoArrows, setTwoArrows] = useState(false);\r\n  const [zeroArrows, setZeroArrows] = useState(false);\r\n  const [makeSmallText, setMakeSmallText] = useState(false);\r\n\r\n  const chooseDisplayedInfo = (id) => {\r\n    if (\"infos\" in question[0] && question[0].infos.length > 0) {\r\n      const infos = question[0].infos.filter((info) => info.id === id);\r\n      if (infos.length > 0) {\r\n        console.log(infos[0]);\r\n        setCurrentInfoDisplayed(infos[0]);\r\n        setIsShowInfo(true);\r\n      }\r\n    }\r\n    question[0].options.forEach((option) => {\r\n      if (\"infos\" in option && option.infos.length > 0) {\r\n        const infos = option.infos.filter((info) => info.id === id);\r\n        if (infos.length > 0) {\r\n          setCurrentInfoDisplayed(infos[0]);\r\n          setIsShowInfo(true);\r\n        }\r\n      }\r\n    });\r\n    console.log(\"CURRENT INFO: \", currentInfoDisplayed);\r\n    console.log(\"ISSHOWINFO: \", isShowInfo);\r\n  };\r\n\r\n  const checkInfosForOptions = (option) => {\r\n    if (!option.infos || option.infos.length === 0) {\r\n      let number = option.text[0];\r\n      const n = <div className=\"number\">{number}</div>;\r\n      var text = option.text.split(/.(.+)/)[1];\r\n      text = text.split(/.(.+)/)[1];\r\n      const header = text.split(/[.,,,:,;,!,?](.+)/);\r\n      console.log(header[0]);\r\n      const high = <div className=\"highlighted\">{header[0]}</div>;\r\n      const rest = header[1];\r\n      const all = (\r\n        <div className=\"header\">\r\n          {n}\r\n          {high}\r\n        </div>\r\n      );\r\n      const newText = [all, rest];\r\n      return <div className=\"text\">{newText}</div>;\r\n    }\r\n    let allId = option.infos.map((e) => e.id);\r\n    let allText = option.infos.map((e) => e.altText);\r\n\r\n    const l = (parts, i) => {\r\n      //для верной передачи цифр\r\n      return (\r\n        <a\r\n          className=\"info-link\"\r\n          onClick={() => {\r\n            console.log(allId[Math.floor(i / 2)]);\r\n            chooseDisplayedInfo(allId[Math.floor(i / 2)]);\r\n          }}\r\n        >\r\n          {parts[i]}\r\n        </a>\r\n      );\r\n    };\r\n\r\n    const separateParts = (text) => {\r\n      const number = text[0];\r\n      const n = <div className=\"number\">{number}</div>; //NUMBER\r\n      let allButNumber = text.split(/.(.+)/)[1];\r\n      allButNumber = allButNumber.split(/.(.+)/)[1];\r\n      let header = allButNumber.split(/[.,,,:,;,!,?](.+)/)[0]; //HEADER\r\n      let theRest = allButNumber.split(/[.,,,:,;,!,?](.+)/)[1]; //REST\r\n      let checkHeader = header.split(new RegExp(`(${allText.join(\"|\")})`));\r\n      console.log(checkHeader);\r\n      let checkRest;\r\n      if (theRest !== undefined) {\r\n        checkRest = theRest.split(new RegExp(`(${allText.join(\"|\")})`));\r\n      } else {\r\n        checkRest = [];\r\n      }\r\n\r\n      //    IF LINK IN HEADER\r\n      if (checkHeader.length > 2) {\r\n        for (let i = 1; i < checkHeader.length; i += 2) {\r\n          checkHeader[i] = l(checkHeader, i);\r\n        }\r\n\r\n        let firstPart = (\r\n          <div className=\"highlighted\">\r\n            {[checkHeader[0], checkHeader[1], checkHeader[2]]}\r\n          </div>\r\n        );\r\n        const all = (\r\n          <div className=\"header\">\r\n            {n}\r\n            {firstPart}\r\n          </div>\r\n        );\r\n        if (theRest !== undefined) {\r\n          checkHeader.push(theRest);\r\n        }\r\n        let final = [all, checkHeader[checkHeader.length - 1]];\r\n        return [final];\r\n      }\r\n      if (checkRest.length > 2) {\r\n        for (let i = 1; i < checkRest.length; i += 2) {\r\n          checkRest[i] = l(checkRest, i);\r\n        }\r\n        let firstPart = <div className=\"highlighted\">{checkHeader[0]}</div>;\r\n        const all = (\r\n          <div className=\"header\">\r\n            {n}\r\n            {firstPart}\r\n          </div>\r\n        );\r\n        let final = [all, checkRest];\r\n        return [final];\r\n      }\r\n    };\r\n\r\n    let parts = option.text.split(new RegExp(`(${allText.join(\"|\")})`));\r\n    for (let i = 1; i < parts.length; i += 2) {\r\n      parts[i] = l(parts, i);\r\n    }\r\n\r\n    const separatedText = separateParts(option.text);\r\n    // console.log(separatedText);\r\n    return <div className=\"text\">{separatedText}</div>;\r\n  };\r\n\r\n  function checkInfosForQuestion(question) {\r\n    if (!question[0].infos) return <h2>{question[0].text}</h2>;\r\n    let allId = question[0].infos.map((e) => e.id);\r\n    let allText = question[0].infos.map((e) => e.altText);\r\n\r\n    const l = (parts, i) => {\r\n      //для верной передачи цифр\r\n      //   console.log(\"INDEX: \", i, \"\");\r\n      //   console.log(allId[Math.floor(i / 2)]);\r\n      return (\r\n        <a\r\n          className=\"info-link\"\r\n          onClick={() => {\r\n            chooseDisplayedInfo(allId[Math.floor(i / 2)]);\r\n          }}\r\n        >\r\n          {parts[i]}\r\n        </a>\r\n      );\r\n    };\r\n    let parts = question[0].text.split(new RegExp(`(${allText.join(\"|\")})`));\r\n    console.log(parts);\r\n    for (let i = 1; i < parts.length; i += 2) {\r\n      parts[i] = l(parts, i);\r\n    }\r\n\r\n    return <h2>{parts}</h2>;\r\n  }\r\n\r\n  const isOverflown = ({\r\n    clientWidth,\r\n    clientHeight,\r\n    scrollWidth,\r\n    scrollHeight,\r\n  }) => {\r\n    return scrollHeight > clientHeight || scrollWidth > clientWidth;\r\n  };\r\n\r\n  const heightIsOverNpx = ({ clientHeight }, number) => {\r\n    return clientHeight >= number;\r\n  };\r\n\r\n  const determineArrowsNumber = () => {\r\n    const main = document.getElementsByClassName(\"main\")[0];\r\n    const viewportHeight =\r\n      document.getElementsByTagName(\"body\")[0].clientHeight;\r\n    const overflowMain = isOverflown(main);\r\n    const questionText = document.getElementsByClassName(\"question-text\")[0];\r\n    const heightOver200 = heightIsOverNpx(questionText, 200);\r\n    const heightOver100 = heightIsOverNpx(questionText, 100);\r\n    if (overflowMain) {\r\n      heightOver200 ? setZeroArrows(true) : setOneArrow(true);\r\n    } else if (heightOver200) {\r\n      setZeroArrows(true);\r\n    } else {\r\n      viewportHeight <= 1000 && heightOver100\r\n        ? setOneArrow(true)\r\n        : setTwoArrows(true);\r\n    }\r\n  };\r\n\r\n  const determineTextSmall = () => {\r\n    const questionText = document.getElementsByClassName(\"question-text\")[0];\r\n    if (heightIsOverNpx(questionText, 700)) {\r\n      setMakeSmallText(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    determineArrowsNumber();\r\n    determineTextSmall();\r\n  }, [question]);\r\n\r\n  return (\r\n    <>\r\n      {/* <TransitionGroup component={null}>\r\n        <CSSTransition\r\n          in={!isLoading}\r\n          key={question[0].id}\r\n          timeout={500}\r\n          classNames=\"alert\"\r\n        > */}\r\n      <>\r\n        {/* <div className=\"id-testing\">current: {question[0].id}</div> */}{\" \"}\r\n        {/*testing */}\r\n        {question[0].options.length === 1 && (\r\n          <div className=\"arrows\">\r\n            {!zeroArrows && oneArrow && (\r\n              <svg\r\n                className=\"arrow\"\r\n                width=\"87\"\r\n                height=\"157\"\r\n                viewBox=\"0 0 87 157\"\r\n                fill=\"none\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n              >\r\n                <path\r\n                  fill-rule=\"evenodd\"\r\n                  clip-rule=\"evenodd\"\r\n                  d=\"M85.1192 93.312C86.2457 94.1102 86.5118 95.6706 85.7135 96.7972L44.3733 155.138C43.8986 155.808 43.1253 156.202 42.3044 156.192C41.4835 156.183 40.7196 155.771 40.2606 155.09L0.927173 96.7493C0.15533 95.6045 0.457683 94.0507 1.60251 93.2789C2.74733 92.507 4.3011 92.8094 5.07295 93.9542L39.8335 145.512L39.8335 3C39.8335 1.61929 40.9528 0.499998 42.3335 0.499998C43.7142 0.499998 44.8335 1.61929 44.8335 3L44.8335 145.84L81.6339 93.9064C82.4322 92.7798 83.9926 92.5137 85.1192 93.312Z\"\r\n                  fill=\"#FF2400\"\r\n                />\r\n              </svg>\r\n            )}\r\n            {!zeroArrows && twoArrows && (\r\n              <>\r\n                <svg\r\n                  className=\"arrow\"\r\n                  width=\"87\"\r\n                  height=\"157\"\r\n                  viewBox=\"0 0 87 157\"\r\n                  fill=\"none\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                >\r\n                  <path\r\n                    fill-rule=\"evenodd\"\r\n                    clip-rule=\"evenodd\"\r\n                    d=\"M85.1192 93.312C86.2457 94.1102 86.5118 95.6706 85.7135 96.7972L44.3733 155.138C43.8986 155.808 43.1253 156.202 42.3044 156.192C41.4835 156.183 40.7196 155.771 40.2606 155.09L0.927173 96.7493C0.15533 95.6045 0.457683 94.0507 1.60251 93.2789C2.74733 92.507 4.3011 92.8094 5.07295 93.9542L39.8335 145.512L39.8335 3C39.8335 1.61929 40.9528 0.499998 42.3335 0.499998C43.7142 0.499998 44.8335 1.61929 44.8335 3L44.8335 145.84L81.6339 93.9064C82.4322 92.7798 83.9926 92.5137 85.1192 93.312Z\"\r\n                    fill=\"#FF2400\"\r\n                  />\r\n                </svg>\r\n                <svg\r\n                  className=\"arrow\"\r\n                  width=\"87\"\r\n                  height=\"157\"\r\n                  viewBox=\"0 0 87 157\"\r\n                  fill=\"none\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                >\r\n                  <path\r\n                    fill-rule=\"evenodd\"\r\n                    clip-rule=\"evenodd\"\r\n                    d=\"M85.1192 93.312C86.2457 94.1102 86.5118 95.6706 85.7135 96.7972L44.3733 155.138C43.8986 155.808 43.1253 156.202 42.3044 156.192C41.4835 156.183 40.7196 155.771 40.2606 155.09L0.927173 96.7493C0.15533 95.6045 0.457683 94.0507 1.60251 93.2789C2.74733 92.507 4.3011 92.8094 5.07295 93.9542L39.8335 145.512L39.8335 3C39.8335 1.61929 40.9528 0.499998 42.3335 0.499998C43.7142 0.499998 44.8335 1.61929 44.8335 3L44.8335 145.84L81.6339 93.9064C82.4322 92.7798 83.9926 92.5137 85.1192 93.312Z\"\r\n                    fill=\"#FF2400\"\r\n                  />\r\n                </svg>\r\n              </>\r\n            )}\r\n          </div>\r\n        )}\r\n        <div className={`question-text ${makeSmallText ? \" small-text\" : \"\"}`}>\r\n          {checkInfosForQuestion(question)}\r\n        </div>\r\n        {question[0].options.length > 1 && (\r\n          <>\r\n            <div className=\"options\">\r\n              <div className=\"option-container\">\r\n                {question[0].options.map((option) => {\r\n                  if (\"nextJump\" in option) {\r\n                    if (\"jumpFromHere\" in option) {\r\n                      var jumpFromHere =\r\n                        localStorage.getItem(\"jump-from-here\") ||\r\n                        option.jumpFromHere;\r\n                      //   localStorage.setItem(\r\n                      //     \"jump-from-here\",\r\n                      //     JSON.stringify(jumpFromHere)\r\n                      //   );\r\n                    }\r\n                    const nextJump =\r\n                      parseInt(localStorage.getItem(\"next-jump\")) ||\r\n                      option.nextJump;\r\n                    // localStorage.setItem(\"next-jump\", JSON.stringify(nextJump));\r\n                    const next = option.next;\r\n                    return (\r\n                      <>\r\n                        {/*testing*/}\r\n                        {/* <div className=\"next-option-testing\">\r\n                      nextJump: {option.nextJump}\r\n                    </div> */}\r\n                        <button\r\n                          className={`option ${\r\n                            option.isActive ? \"active\" : \"\"\r\n                          }`}\r\n                          key={option.id}\r\n                          onClick={() =>\r\n                            nextClick(\r\n                              option.id,\r\n                              option.isActive,\r\n                              next,\r\n                              nextJump,\r\n                              jumpFromHere\r\n                            )\r\n                          }\r\n                        >\r\n                          {checkInfosForOptions(option)}\r\n                          {\"img\" in option && option.img !== \"\" && (\r\n                            <img\r\n                              className=\"option-img\"\r\n                              src={\r\n                                process.env.PUBLIC_URL + `/images/${option.img}`\r\n                              }\r\n                              style={!isLoading ? {} : { display: \"none\" }}\r\n                              alt=\"\"\r\n                              onLoad={() => setImgLoaded(true)}\r\n                            />\r\n                          )}\r\n                        </button>\r\n                      </>\r\n                    );\r\n                  } else {\r\n                    if (\"jumpFromHere\" in option) {\r\n                      jumpFromHere =\r\n                        localStorage.getItem(\"jump-from-here\") ||\r\n                        option.jumpFromHere;\r\n                      localStorage.setItem(\r\n                        \"jump-from-here\",\r\n                        JSON.stringify(jumpFromHere)\r\n                      );\r\n                    }\r\n                    const next = option.next;\r\n                    return (\r\n                      <>\r\n                        {/*testing*/}\r\n                        {/* <div className=\"next-option-testing\">\r\n                      next: {option.next}\r\n                    </div> */}\r\n                        <button\r\n                          className={`option ${\r\n                            option.isActive ? \"active\" : \"\"\r\n                          }`}\r\n                          key={option.id}\r\n                          onClick={() =>\r\n                            nextClick(\r\n                              option.id,\r\n                              option.isActive,\r\n                              next,\r\n                              0,\r\n                              jumpFromHere\r\n                            )\r\n                          }\r\n                        >\r\n                          {checkInfosForOptions(option)}\r\n                          {\"img\" in option && option.img !== \"\" ? (\r\n                            <img\r\n                              className=\"option-img\"\r\n                              src={\r\n                                process.env.PUBLIC_URL + `/images/${option.img}`\r\n                              }\r\n                              style={!isLoading ? {} : { display: \"none\" }}\r\n                              alt=\"img here\"\r\n                              onLoad={() => setImgLoaded(true)}\r\n                            />\r\n                          ) : null}\r\n                        </button>\r\n                      </>\r\n                    );\r\n                  }\r\n                })}\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n        {\"lose\" in question[0] && <LoseScreen question={question} />}\r\n        {question[0].options.length === 1 && (\r\n          <div className=\"down-line\">\r\n            <hr />\r\n          </div>\r\n        )}\r\n      </>\r\n      {/* </CSSTransition>\r\n      </TransitionGroup> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Image.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Timeline.js",["281","282","283","284"],"import React, { useState } from \"react\";\r\nimport { Chrono } from \"react-chrono\";\r\nimport { useEffect } from \"react\";\r\nimport circle from \"../../images/circle-24.png\";\r\nimport current from \"../../images/current.png\";\r\nimport ReactDOMServer from \"react-dom/server\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nconst Timeline = ({ latestPeriod, questionCounter }) => {\r\n  const [counter, setCounter] = useState(() => {\r\n    return JSON.parse(localStorage.getItem(\"period-counter\")) || 1;\r\n  });\r\n  const [allPeriods, setAllPeriods] = useState(() => {\r\n    //   const saved = JSON.parse(localStorage.getItem('periods'))\r\n    return (\r\n      JSON.parse(localStorage.getItem(\"periods\")) || [\r\n        { title: \"1900-1914\" },\r\n        { title: \"\" },\r\n        { title: \"\" },\r\n        { title: \"\" },\r\n        { title: \"\" },\r\n        { title: \"\" },\r\n        { title: \"\" },\r\n      ]\r\n    );\r\n  });\r\n  const checkIfPeriodExists = () => {\r\n    for (var i = 0; i < allPeriods.length; i++) {\r\n      //   const parts = latestPeriod.split(\"-\");\r\n      //   const newP = (\r\n      //     <p>\r\n      //       {parts[0]}-<span>{parts[1]}</span>\r\n      //     </p>\r\n      //   );\r\n      //   console.log(newP);\r\n      //   const ss = ReactDOMServer.renderToString(allPeriods[i].title);\r\n\r\n      if (allPeriods[i].title === latestPeriod) {\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n\r\n  const addNewPeriod = () => {\r\n    if (!checkIfPeriodExists()) {\r\n      for (var j = 0; j < allPeriods.length; j++) {\r\n        if (allPeriods[j].title === \"\") {\r\n          //   const parts = latestPeriod.split(\"-\");\r\n          //   console.log(parts);\r\n          //   const newP = (\r\n          //     <p>\r\n          //       {parts[0]}-<span>{parts[1]}</span>\r\n          //     </p>\r\n          //   );\r\n          //   console.log(newP);\r\n          //   allPeriods[j].title = newP;\r\n          //   allPeriods[j].title = latestPeriod;\r\n          const allPeriodsCopy = [...allPeriods];\r\n          console.log(allPeriodsCopy);\r\n          allPeriodsCopy[j].title = latestPeriod;\r\n          setAllPeriods(allPeriodsCopy);\r\n          setCounter(counter + 1);\r\n          console.log(counter);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const passImages = (counter) => {\r\n    let images = [];\r\n    for (let i = 0; i < counter - 1; i++) {\r\n      images.push(<img style={{ width: \"23px\" }} src={circle} alt=\"IMAG\" />);\r\n    }\r\n    images.push(<img style={{ width: \"30px\" }} src={current} alt=\"question\" />);\r\n    for (let i = 0; i < 7 - counter; i++) {\r\n      images.push(\r\n        <img\r\n          style={{ width: \"20px\" }}\r\n          src={process.env.PUBLIC_URL + `/images/question-mark.png`}\r\n          alt=\"question\"\r\n        />\r\n      );\r\n    }\r\n\r\n    return images;\r\n  };\r\n\r\n  //   const getClientWidth = () => {\r\n  //     return document.getElementsByTagName(\"body\")[0].clientWidth;\r\n  //   };\r\n  const clientWidth = document.getElementsByTagName(\"body\")[0].clientWidth;\r\n  console.log(clientWidth);\r\n\r\n  useEffect(() => {\r\n    console.log(\"IN USE EFFECT TIMELINE\");\r\n    addNewPeriod();\r\n    // localStorage.setItem(\"periods\", JSON.stringify(allPeriods));\r\n    // localStorage.setItem(\"period-counter\", JSON.stringify(counter));\r\n  }, [questionCounter, counter]);\r\n\r\n  const images = passImages(counter);\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      <Chrono\r\n        itemWidth={\r\n          clientWidth >= 3500\r\n            ? \"450\"\r\n            : clientWidth >= 2400\r\n            ? \"285\"\r\n            : clientWidth >= 1920\r\n            ? \"230\"\r\n            : clientWidth >= 1600\r\n            ? \"190\"\r\n            : clientWidth >= 1440\r\n            ? \"170\"\r\n            : clientWidth >= 1366\r\n            ? \"170\"\r\n            : \"130\"\r\n        }\r\n        hideControls={true}\r\n        items={allPeriods}\r\n        allowDynamicUpdate={true}\r\n        theme={{\r\n          primary: \"black\",\r\n          secondary: \"red\",\r\n          cardBgColor: \"yellow\",\r\n          cardForeColor: \"violet\",\r\n          titleColor: \"black\",\r\n        }}\r\n        onItemSelected={() => console.log(\"ITEM WAS SELECTED\")}\r\n      >\r\n        <div className=\"chrono-icons\">{images}</div>\r\n      </Chrono>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timeline;\r\n","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Loading.js",["285"],"C:\\Programming\\revolution-text-game\\client\\src\\components\\AdminPage\\EditingPage\\newQuestion.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\components\\AdminPage\\EditingPage\\allQuestions.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Editing\\QuestionMap.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\components\\AdminPage\\EditingPage\\currentQuestion.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\utils\\notifyers.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Editing\\EditQuestion.js",["286","287","288","289","290","291"],"import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  getQuestions,\r\n  createQuestion,\r\n  updateQuestion,\r\n  deleteQuestion,\r\n} from \"../../../actions/questions\";\r\nimport { useSelector } from \"react-redux\";\r\nimport AddOptions from \"../Editing/AddOptions\";\r\nimport FileBase from \"react-file-base64\";\r\nimport \"../../../styles/main/edit-question.css\";\r\n\r\nimport AddInfosQuestion from \"../Editing/AddInfosQuestion\";\r\nimport { notifyAboutEdit } from \"../../../utils/notifyers\";\r\n\r\nconst EditQuestion = ({\r\n  dispatch,\r\n  questionToUpdate,\r\n  showModalQuestion,\r\n  questions,\r\n  alertDeleteQuestion,\r\n  setIdForDelete,\r\n  setAlertDeleteQuestion,\r\n  idForDelete,\r\n  initialState,\r\n  setShowModalQuestion,\r\n  setCurrentQuestionID,\r\n  currentQuestionID,\r\n  questionInitialState,\r\n  setQuestionInitialState,\r\n  setIndex,\r\n  question,\r\n  setQuestion,\r\n}) => {\r\n  const [currentOptionID, setCurrentOptionID] = useState(null);\r\n  const [currentInfoID, setCurrentInfoID] = useState(null);\r\n  const [showModalOptions, setShowModalOptions] = useState(false);\r\n  const [showInfos, setShowInfos] = useState(false);\r\n  const optionToUpdate = currentOptionID\r\n    ? questionInitialState.options.find(\r\n        (option) => option.id === currentOptionID\r\n      )\r\n    : null;\r\n\r\n  const [alertDeleteInfos, setAlertDeleteInfos] = useState(false);\r\n  const [line, setLine] = useState(\"unset\");\r\n  console.log(showModalQuestion);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (currentQuestionID) {\r\n      dispatch(updateQuestion(currentQuestionID, questionInitialState));\r\n    } else {\r\n      dispatch(createQuestion(questionInitialState));\r\n    }\r\n    setCurrentQuestionID(null);\r\n    setShowModalQuestion(false);\r\n    setQuestionInitialState(initialState);\r\n    document.body.style.overflow = \"unset\";\r\n    notifyAboutEdit(currentQuestionID);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (questionToUpdate) setQuestionInitialState(questionToUpdate);\r\n  }, [questionToUpdate]);\r\n\r\n  useEffect(() => {\r\n    if (showModalOptions || showModalQuestion) {\r\n      document.body.style.overflow = \"hidden\";\r\n    } else {\r\n      document.body.style.overflow = \"unset\";\r\n    }\r\n  }, [showModalQuestion, showModalOptions]);\r\n\r\n  useEffect(() => {\r\n    if (!questionToUpdate) {\r\n      let temp = 999;\r\n      if (line === \"male\") {\r\n        if (questions.length > 0) {\r\n          questions.forEach((x) => {\r\n            if (x.id > temp && x.id < 1100) {\r\n              temp = x.id;\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        if (questions.length > 0) {\r\n          questions.forEach((x) => {\r\n            if (x.id > temp && x.id > 1100) {\r\n              temp = x.id;\r\n            }\r\n          });\r\n        }\r\n      }\r\n      setQuestionInitialState({ ...questionInitialState, id: temp + 1 });\r\n      temp = 999;\r\n    }\r\n  }, [line]);\r\n\r\n  return (\r\n    <div>\r\n      {/* {alertDeleteQuestion && (\r\n        <div className=\"alert-delete-modal\">\r\n          <div className=\"alert-delete-modal-content\">\r\n            <p>\r\n              Вы уверены, что хотите удалить вопрос?\r\n              <div className=\"buttons\">\r\n                <button\r\n                  onClick={() => {\r\n                    dispatch(deleteQuestion(idForDelete));\r\n                    setIdForDelete(null);\r\n                    setAlertDeleteQuestion(false);\r\n                  }}\r\n                >\r\n                  Да\r\n                </button>\r\n                <button onClick={() => setAlertDeleteQuestion(false)}>\r\n                  Нет\r\n                </button>\r\n              </div>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )} */}\r\n      {showModalQuestion && (\r\n        <div className=\"modal-edit-question\">\r\n          <div className=\"modal-content\">\r\n            <div\r\n              className=\"header\"\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <button\r\n                className=\"cancel-btn\"\r\n                onClick={() => {\r\n                  document.body.style.overflow = \"unset\";\r\n                  setQuestionInitialState(initialState);\r\n                  setShowModalQuestion(false);\r\n                  setCurrentQuestionID(null);\r\n                  setLine(\"unset\");\r\n                  console.log(showModalQuestion, showModalOptions);\r\n                }}\r\n              >\r\n                <svg className=\"svg-icon\" viewBox=\"0 0 20 20\" width=\"50\">\r\n                  <path\r\n                    fill=\"grey\"\r\n                    d=\"M8.388,10.049l4.76-4.873c0.303-0.31,0.297-0.804-0.012-1.105c-0.309-0.304-0.803-0.293-1.105,0.012L6.726,9.516c-0.303,0.31-0.296,0.805,0.012,1.105l5.433,5.307c0.152,0.148,0.35,0.223,0.547,0.223c0.203,0,0.406-0.08,0.559-0.236c0.303-0.309,0.295-0.803-0.012-1.104L8.388,10.049z\"\r\n                  ></path>\r\n                </svg>\r\n                <div>Отменить</div>\r\n              </button>\r\n              <h2 style={{ fontSize: \"24px\", fontWeight: \"300\" }}>\r\n                {currentQuestionID\r\n                  ? \"Редактирование вопроса \"\r\n                  : \"Добавление вопроса \"}\r\n                <span style={{ textDecoration: \"underline\" }}>\r\n                  {questionInitialState.id}\r\n                </span>\r\n              </h2>\r\n              <button\r\n                type=\"button\"\r\n                onClick={(e) => handleSubmit(e)}\r\n                className=\"save-btn\"\r\n              >\r\n                {currentQuestionID ? \"Сохранить\" : \"Добавить\"}\r\n              </button>\r\n            </div>\r\n            <div className=\"form\">\r\n              <form autoComplete=\"off\" action=\"\">\r\n                <label htmlFor=\"\">\r\n                  Текст вопроса:\r\n                  <textarea\r\n                    type=\"text\"\r\n                    value={questionInitialState.text}\r\n                    onChange={(e) =>\r\n                      setQuestionInitialState({\r\n                        ...questionInitialState,\r\n                        text: e.target.value,\r\n                      })\r\n                    }\r\n                    style={{\r\n                      display: \"block\",\r\n                      width: \"95%\",\r\n                      minHeight: \"90px\",\r\n                    }}\r\n                  />\r\n                </label>\r\n\r\n                <div\r\n                  className=\"second-row\"\r\n                  style={{ display: \"flex\", marginTop: \"20px\" }}\r\n                >\r\n                  <label htmlFor=\"\">\r\n                    Год:\r\n                    <input\r\n                      type=\"text\"\r\n                      value={questionInitialState.year}\r\n                      onChange={(e) =>\r\n                        setQuestionInitialState({\r\n                          ...questionInitialState,\r\n                          year: e.target.value,\r\n                        })\r\n                      }\r\n                      style={{\r\n                        display: \"block\",\r\n                        marginRight: \"30px\",\r\n                        width: \"80px\",\r\n                        borderColor: \"#ababab\",\r\n                        backgroundColor: \"transparent\",\r\n                      }}\r\n                    />\r\n                  </label>\r\n                  <label htmlFor=\"\">\r\n                    Временной период:\r\n                    <select\r\n                      type=\"text\"\r\n                      value={questionInitialState.period}\r\n                      onChange={(e) =>\r\n                        setQuestionInitialState({\r\n                          ...questionInitialState,\r\n                          period: e.target.value,\r\n                        })\r\n                      }\r\n                      style={{ display: \"block\", marginRight: \"30px\" }}\r\n                    >\r\n                      <option value=\"\">---Выберите период---</option>\r\n                      <option value=\"1900-1914\">1900-1914</option>\r\n                      <option value=\"1914-1917\">1914-1917</option>\r\n                      <option value=\"1918-1922\">1918-1922</option>\r\n                      <option value=\"1922-1929\">1922-1929</option>\r\n                      <option value=\"1929-1941\">1929-1941</option>\r\n                      <option value=\"1941-1945\">1941-1945</option>\r\n                      <option value=\"1945-1953\">1945-1953</option>\r\n                    </select>\r\n                  </label>\r\n                  <label htmlFor=\"\">\r\n                    Ветка:\r\n                    <select\r\n                      type=\"text\"\r\n                      value={\r\n                        questionInitialState.id > 999\r\n                          ? Math.floor(questionInitialState.id / 100) === 10\r\n                            ? \"male\"\r\n                            : \"female\"\r\n                          : \"unset\"\r\n                      }\r\n                      onChange={(e) => setLine(e.target.value)}\r\n                      style={{ display: \"block\", marginRight: \"30px\" }}\r\n                    >\r\n                      <option value=\"\">---Выберите ветку---</option>\r\n                      <option value=\"female\">Женская</option>\r\n                      <option value=\"male\">Мужская</option>\r\n                    </select>\r\n                  </label>\r\n                  <div className=\"image-container\">\r\n                    {questionInitialState.img !== \"\" && (\r\n                      <div className=\"image\">\r\n                        <span>Текущее изображение:</span>\r\n                        <img\r\n                          //   src={\r\n                          //     process.env.PUBLIC_URL + `/images/${question.img}`\r\n                          //   }\r\n                          src={`./images/${questionInitialState.img}`}\r\n                          alt=\"\"\r\n                          style={{\r\n                            width: \"100px\",\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    )}\r\n                    {questionInitialState.img === \"\" && (\r\n                      <span>Выбрать изображение (опционально)</span>\r\n                    )}\r\n                    <FileBase\r\n                      type=\"file\"\r\n                      multiple={false}\r\n                      onDone={({ base64 }) =>\r\n                        setQuestionInitialState({\r\n                          ...questionInitialState,\r\n                          img: base64,\r\n                        })\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <label htmlFor=\"lose\">\r\n                    Это последний вопрос в ветке?\r\n                    <input\r\n                      className=\"checkbox\"\r\n                      type=\"checkbox\"\r\n                      id=\"lose\"\r\n                      name=\"lose\"\r\n                      value={questionInitialState.lose}\r\n                      checked={questionInitialState.lose}\r\n                      onChange={() => {\r\n                        setQuestionInitialState({\r\n                          ...questionInitialState,\r\n                          lose: !questionInitialState.lose,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </label>\r\n                </div>\r\n                <h3 className=\"options-header\">Варианты ответа:</h3>\r\n                <div className=\"options\">\r\n                  {questionInitialState.options.map((option, index) => {\r\n                    return (\r\n                      <div className=\"option\" key={option.id}>\r\n                        <div className=\"text\">\r\n                          {option.text} <br />\r\n                          {option.next === 0 ? (\r\n                            <span style={{ color: \"red\" }}>\r\n                              Следующий вопрос не установлен!\r\n                            </span>\r\n                          ) : (\r\n                            <div style={{ margin: \"10px 0\", color: \"#bbb\" }}>\r\n                              Следующий вопрос:\r\n                              <span\r\n                                style={{\r\n                                  textDecoration: \"underline\",\r\n                                  marginLeft: \"5px\",\r\n                                }}\r\n                              >\r\n                                {option.next}\r\n                              </span>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"buttons\">\r\n                          <button\r\n                            className=\"delete-button\"\r\n                            onClick={() => {\r\n                              const copyOptions =\r\n                                questionInitialState.options.filter(\r\n                                  (x) => x.id !== option.id\r\n                                );\r\n                              setQuestionInitialState({\r\n                                ...questionInitialState,\r\n                                options: copyOptions,\r\n                              });\r\n                            }}\r\n                          >\r\n                            <svg className=\"delete-icon\" viewBox=\"0 0 20 20\">\r\n                              <path\r\n                                fill=\"#d4d4d4\"\r\n                                d=\"M16.471,5.962c-0.365-0.066-0.709,0.176-0.774,0.538l-1.843,10.217H6.096L4.255,6.5c-0.066-0.362-0.42-0.603-0.775-0.538C3.117,6.027,2.876,6.375,2.942,6.737l1.94,10.765c0.058,0.318,0.334,0.549,0.657,0.549h8.872c0.323,0,0.6-0.23,0.656-0.549l1.941-10.765C17.074,6.375,16.833,6.027,16.471,5.962z\"\r\n                              ></path>\r\n                              <path\r\n                                fill=\"#d4d4d4\"\r\n                                d=\"M16.594,3.804H3.406c-0.369,0-0.667,0.298-0.667,0.667s0.299,0.667,0.667,0.667h13.188c0.369,0,0.667-0.298,0.667-0.667S16.963,3.804,16.594,3.804z\"\r\n                              ></path>\r\n                              <path\r\n                                fill=\"#d4d4d4\"\r\n                                d=\"M9.25,3.284h1.501c0.368,0,0.667-0.298,0.667-0.667c0-0.369-0.299-0.667-0.667-0.667H9.25c-0.369,0-0.667,0.298-0.667,0.667C8.583,2.985,8.882,3.284,9.25,3.284z\"\r\n                              ></path>\r\n                            </svg>\r\n                          </button>\r\n                          <button\r\n                            className=\"edit-button\"\r\n                            onClick={(e) => {\r\n                              e.preventDefault();\r\n                              setCurrentOptionID(option.id);\r\n                              setShowModalOptions(true);\r\n                              //   setShowModalQuestion(false);\r\n                            }}\r\n                          >\r\n                            <svg className=\"svg-icon\" viewBox=\"0 0 20 20\">\r\n                              <path\r\n                                fill=\"#d4d4d4\"\r\n                                d=\"M19.404,6.65l-5.998-5.996c-0.292-0.292-0.765-0.292-1.056,0l-2.22,2.22l-8.311,8.313l-0.003,0.001v0.003l-0.161,0.161c-0.114,0.112-0.187,0.258-0.21,0.417l-1.059,7.051c-0.035,0.233,0.044,0.47,0.21,0.639c0.143,0.14,0.333,0.219,0.528,0.219c0.038,0,0.073-0.003,0.111-0.009l7.054-1.055c0.158-0.025,0.306-0.098,0.417-0.211l8.478-8.476l2.22-2.22C19.695,7.414,19.695,6.941,19.404,6.65z M8.341,16.656l-0.989-0.99l7.258-7.258l0.989,0.99L8.341,16.656z M2.332,15.919l0.411-2.748l4.143,4.143l-2.748,0.41L2.332,15.919z M13.554,7.351L6.296,14.61l-0.849-0.848l7.259-7.258l0.423,0.424L13.554,7.351zM10.658,4.457l0.992,0.99l-7.259,7.258L3.4,11.715L10.658,4.457z M16.656,8.342l-1.517-1.517V6.823h-0.003l-0.951-0.951l-2.471-2.471l1.164-1.164l4.942,4.94L16.656,8.342z\"\r\n                              ></path>\r\n                            </svg>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      setShowModalOptions(true);\r\n                      //   setShowModalQuestion(false);\r\n                    }}\r\n                    style={{\r\n                      backgroundColor: \"#F4F4F4\",\r\n                      borderRadius: \"5px\",\r\n                      border: \"none\",\r\n                      minHeight: \"200px\",\r\n                      width: \"170px\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      className=\"icon icon-tabler icon-tabler-plus\"\r\n                      width=\"80%\"\r\n                      height=\"80%\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      stroke-width=\"1\"\r\n                      stroke=\"currentColor\"\r\n                      fill=\"none\"\r\n                      //   stroke-linecap=\"round\"\r\n                      //   stroke-linejoin=\"round\"\r\n                    >\r\n                      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n                      <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\r\n                      <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n                <label htmlFor=\"infos\">\r\n                  У вопроса будет справочная информация?\r\n                  <input\r\n                    className=\"checkbox\"\r\n                    type=\"checkbox\"\r\n                    id=\"infos\"\r\n                    name=\"infos\"\r\n                    value={questionInitialState.isInfo}\r\n                    checked={questionInitialState.isInfo}\r\n                    onChange={() => {\r\n                      setShowInfos(false);\r\n                      if (questionInitialState.infos.length > 0) {\r\n                        setAlertDeleteInfos(true);\r\n                      } else {\r\n                        setQuestionInitialState({\r\n                          ...questionInitialState,\r\n                          isInfo: !questionInitialState.isInfo,\r\n                        });\r\n                      }\r\n                    }}\r\n                  />\r\n                </label>\r\n                {alertDeleteInfos && (\r\n                  <label htmlFor=\"alert\" style={{ marginLeft: \"20px\" }}>\r\n                    Удалить все справки?\r\n                    <button\r\n                      className=\"confirm-btn\"\r\n                      onClick={() => {\r\n                        setQuestionInitialState({\r\n                          ...questionInitialState,\r\n                          isInfo: false,\r\n                          infos: [],\r\n                        });\r\n                        setAlertDeleteInfos(false);\r\n                      }}\r\n                    >\r\n                      Да\r\n                    </button>\r\n                    <button\r\n                      className=\"confirm-btn\"\r\n                      type=\"button\"\r\n                      onClick={() => {\r\n                        setAlertDeleteInfos(false);\r\n                      }}\r\n                    >\r\n                      Нет\r\n                    </button>\r\n                  </label>\r\n                )}\r\n                {questionInitialState.isInfo && (\r\n                  <>\r\n                    <h3 className=\"options-header\">Справки для вопроса:</h3>\r\n                    <div className=\"options\">\r\n                      {questionInitialState.infos.map((info, index) => {\r\n                        return (\r\n                          <div className=\"option\" key={info.id}>\r\n                            <div className=\"text\">\r\n                              {info.name} <br />\r\n                            </div>\r\n                            <div className=\"buttons\">\r\n                              <button\r\n                                className=\"delete-button\"\r\n                                onClick={() => {\r\n                                  const copyInfos =\r\n                                    questionInitialState.infos.filter(\r\n                                      (x) => x.id !== info.id\r\n                                    );\r\n                                  setQuestionInitialState({\r\n                                    ...questionInitialState,\r\n                                    infos: copyInfos,\r\n                                  });\r\n                                }}\r\n                              >\r\n                                <svg\r\n                                  className=\"delete-icon\"\r\n                                  viewBox=\"0 0 20 20\"\r\n                                >\r\n                                  <path\r\n                                    fill=\"#d4d4d4\"\r\n                                    d=\"M16.471,5.962c-0.365-0.066-0.709,0.176-0.774,0.538l-1.843,10.217H6.096L4.255,6.5c-0.066-0.362-0.42-0.603-0.775-0.538C3.117,6.027,2.876,6.375,2.942,6.737l1.94,10.765c0.058,0.318,0.334,0.549,0.657,0.549h8.872c0.323,0,0.6-0.23,0.656-0.549l1.941-10.765C17.074,6.375,16.833,6.027,16.471,5.962z\"\r\n                                  ></path>\r\n                                  <path\r\n                                    fill=\"#d4d4d4\"\r\n                                    d=\"M16.594,3.804H3.406c-0.369,0-0.667,0.298-0.667,0.667s0.299,0.667,0.667,0.667h13.188c0.369,0,0.667-0.298,0.667-0.667S16.963,3.804,16.594,3.804z\"\r\n                                  ></path>\r\n                                  <path\r\n                                    fill=\"#d4d4d4\"\r\n                                    d=\"M9.25,3.284h1.501c0.368,0,0.667-0.298,0.667-0.667c0-0.369-0.299-0.667-0.667-0.667H9.25c-0.369,0-0.667,0.298-0.667,0.667C8.583,2.985,8.882,3.284,9.25,3.284z\"\r\n                                  ></path>\r\n                                </svg>\r\n                              </button>\r\n                              <button\r\n                                className=\"edit-button\"\r\n                                onClick={(e) => {\r\n                                  e.preventDefault();\r\n                                  setCurrentInfoID(info.id);\r\n                                  setShowInfos(true);\r\n                                  // setShowModalQuestion(false);\r\n                                }}\r\n                              >\r\n                                <svg className=\"svg-icon\" viewBox=\"0 0 20 20\">\r\n                                  <path\r\n                                    fill=\"#d4d4d4\"\r\n                                    d=\"M19.404,6.65l-5.998-5.996c-0.292-0.292-0.765-0.292-1.056,0l-2.22,2.22l-8.311,8.313l-0.003,0.001v0.003l-0.161,0.161c-0.114,0.112-0.187,0.258-0.21,0.417l-1.059,7.051c-0.035,0.233,0.044,0.47,0.21,0.639c0.143,0.14,0.333,0.219,0.528,0.219c0.038,0,0.073-0.003,0.111-0.009l7.054-1.055c0.158-0.025,0.306-0.098,0.417-0.211l8.478-8.476l2.22-2.22C19.695,7.414,19.695,6.941,19.404,6.65z M8.341,16.656l-0.989-0.99l7.258-7.258l0.989,0.99L8.341,16.656z M2.332,15.919l0.411-2.748l4.143,4.143l-2.748,0.41L2.332,15.919z M13.554,7.351L6.296,14.61l-0.849-0.848l7.259-7.258l0.423,0.424L13.554,7.351zM10.658,4.457l0.992,0.99l-7.259,7.258L3.4,11.715L10.658,4.457z M16.656,8.342l-1.517-1.517V6.823h-0.003l-0.951-0.951l-2.471-2.471l1.164-1.164l4.942,4.94L16.656,8.342z\"\r\n                                  ></path>\r\n                                </svg>\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setShowInfos(true);\r\n                        }}\r\n                        style={{\r\n                          backgroundColor: \"#F4F4F4\",\r\n                          borderRadius: \"5px\",\r\n                          border: \"none\",\r\n                          minHeight: \"200px\",\r\n                          width: \"170px\",\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          className=\"icon icon-tabler icon-tabler-plus\"\r\n                          width=\"80%\"\r\n                          height=\"80%\"\r\n                          viewBox=\"0 0 24 24\"\r\n                          stroke-width=\"1\"\r\n                          stroke=\"currentColor\"\r\n                          fill=\"none\"\r\n                        >\r\n                          <path\r\n                            stroke=\"none\"\r\n                            d=\"M0 0h24v24H0z\"\r\n                            fill=\"none\"\r\n                          ></path>\r\n                          <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line>\r\n                          <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\r\n                        </svg>\r\n                      </button>\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {showModalOptions && (\r\n        <AddOptions\r\n          setShowModalOptions={setShowModalOptions}\r\n          questionInitialState={questionInitialState}\r\n          setQuestionInitialState={setQuestionInitialState}\r\n          setShowModalQuestion={setShowModalQuestion}\r\n          questions={questions}\r\n          optionToUpdate={optionToUpdate}\r\n          setCurrentOptionID={setCurrentOptionID}\r\n          currentOptionID={currentOptionID}\r\n        />\r\n      )}\r\n      {showInfos && (\r\n        <AddInfosQuestion\r\n          setShowInfos={setShowInfos}\r\n          setShowModalQuestion={setShowModalQuestion}\r\n          questionInitialState={questionInitialState}\r\n          currentInfoID={currentInfoID}\r\n          setQuestionInitialState={setQuestionInitialState}\r\n          setCurrentInfoID={setCurrentInfoID}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditQuestion;\r\n","C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Editing\\AddOptions.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Editing\\AddInfosQuestion.js",[],"C:\\Programming\\revolution-text-game\\client\\src\\components\\GamePage\\Editing\\AddInfosOptions.js",[],{"ruleId":"292","replacedBy":"293"},{"ruleId":"294","replacedBy":"295"},{"ruleId":"296","severity":1,"message":"297","line":2,"column":50,"nodeType":"298","messageId":"299","endLine":2,"endColumn":54},{"ruleId":"296","severity":1,"message":"300","line":6,"column":22,"nodeType":"298","messageId":"299","endLine":6,"endColumn":35},{"ruleId":"296","severity":1,"message":"301","line":1,"column":17,"nodeType":"298","messageId":"299","endLine":1,"endColumn":27},{"ruleId":"296","severity":1,"message":"302","line":2,"column":31,"nodeType":"298","messageId":"299","endLine":2,"endColumn":37},{"ruleId":"296","severity":1,"message":"303","line":3,"column":35,"nodeType":"298","messageId":"299","endLine":3,"endColumn":41},{"ruleId":"296","severity":1,"message":"304","line":3,"column":43,"nodeType":"298","messageId":"299","endLine":3,"endColumn":48},{"ruleId":"296","severity":1,"message":"297","line":3,"column":50,"nodeType":"298","messageId":"299","endLine":3,"endColumn":54},{"ruleId":"296","severity":1,"message":"305","line":11,"column":10,"nodeType":"298","messageId":"299","endLine":11,"endColumn":22},{"ruleId":"296","severity":1,"message":"306","line":25,"column":10,"nodeType":"298","messageId":"299","endLine":25,"endColumn":24},{"ruleId":"296","severity":1,"message":"307","line":29,"column":17,"nodeType":"298","messageId":"299","endLine":29,"endColumn":25},{"ruleId":"308","severity":1,"message":"309","line":98,"column":6,"nodeType":"310","endLine":98,"endColumn":16,"suggestions":"311"},{"ruleId":"308","severity":1,"message":"312","line":109,"column":6,"nodeType":"310","endLine":109,"endColumn":23,"suggestions":"313"},{"ruleId":"296","severity":1,"message":"314","line":2,"column":10,"nodeType":"298","messageId":"299","endLine":2,"endColumn":20},{"ruleId":"315","severity":1,"message":"316","line":13,"column":9,"nodeType":"317","endLine":18,"endColumn":10},{"ruleId":"315","severity":1,"message":"316","line":38,"column":9,"nodeType":"317","endLine":43,"endColumn":10},{"ruleId":"318","severity":1,"message":"319","line":101,"column":23,"nodeType":"298","messageId":"320","endLine":101,"endColumn":35},{"ruleId":"321","severity":1,"message":"322","line":16,"column":30,"nodeType":"323","messageId":"324","endLine":16,"endColumn":32},{"ruleId":"321","severity":1,"message":"322","line":17,"column":48,"nodeType":"323","messageId":"324","endLine":17,"endColumn":50},{"ruleId":"296","severity":1,"message":"325","line":2,"column":10,"nodeType":"298","messageId":"299","endLine":2,"endColumn":19},{"ruleId":"296","severity":1,"message":"326","line":7,"column":10,"nodeType":"298","messageId":"299","endLine":7,"endColumn":20},{"ruleId":"296","severity":1,"message":"327","line":2,"column":27,"nodeType":"298","messageId":"299","endLine":2,"endColumn":33},{"ruleId":"296","severity":1,"message":"328","line":8,"column":10,"nodeType":"298","messageId":"299","endLine":8,"endColumn":23},{"ruleId":"296","severity":1,"message":"329","line":12,"column":3,"nodeType":"298","messageId":"299","endLine":12,"endColumn":17},{"ruleId":"296","severity":1,"message":"330","line":13,"column":3,"nodeType":"298","messageId":"299","endLine":13,"endColumn":17},{"ruleId":"296","severity":1,"message":"331","line":14,"column":3,"nodeType":"298","messageId":"299","endLine":14,"endColumn":17},{"ruleId":"296","severity":1,"message":"332","line":18,"column":8,"nodeType":"298","messageId":"299","endLine":18,"endColumn":12},{"ruleId":"292","replacedBy":"333"},{"ruleId":"294","replacedBy":"334"},{"ruleId":"296","severity":1,"message":"335","line":2,"column":8,"nodeType":"298","messageId":"299","endLine":2,"endColumn":15},{"ruleId":"296","severity":1,"message":"297","line":4,"column":10,"nodeType":"298","messageId":"299","endLine":4,"endColumn":14},{"ruleId":"296","severity":1,"message":"336","line":11,"column":10,"nodeType":"298","messageId":"299","endLine":11,"endColumn":20},{"ruleId":"296","severity":1,"message":"300","line":11,"column":22,"nodeType":"298","messageId":"299","endLine":11,"endColumn":35},{"ruleId":"296","severity":1,"message":"337","line":12,"column":10,"nodeType":"298","messageId":"299","endLine":12,"endColumn":18},{"ruleId":"296","severity":1,"message":"338","line":12,"column":20,"nodeType":"298","messageId":"299","endLine":12,"endColumn":31},{"ruleId":"296","severity":1,"message":"339","line":2,"column":20,"nodeType":"298","messageId":"299","endLine":2,"endColumn":29},{"ruleId":"296","severity":1,"message":"340","line":5,"column":3,"nodeType":"298","messageId":"299","endLine":5,"endColumn":15},{"ruleId":"296","severity":1,"message":"329","line":6,"column":3,"nodeType":"298","messageId":"299","endLine":6,"endColumn":17},{"ruleId":"296","severity":1,"message":"330","line":7,"column":3,"nodeType":"298","messageId":"299","endLine":7,"endColumn":17},{"ruleId":"296","severity":1,"message":"327","line":10,"column":27,"nodeType":"298","messageId":"299","endLine":10,"endColumn":33},{"ruleId":"296","severity":1,"message":"303","line":10,"column":35,"nodeType":"298","messageId":"299","endLine":10,"endColumn":41},{"ruleId":"296","severity":1,"message":"304","line":10,"column":43,"nodeType":"298","messageId":"299","endLine":10,"endColumn":48},{"ruleId":"296","severity":1,"message":"341","line":14,"column":8,"nodeType":"298","messageId":"299","endLine":14,"endColumn":13},{"ruleId":"296","severity":1,"message":"342","line":16,"column":8,"nodeType":"298","messageId":"299","endLine":16,"endColumn":16},{"ruleId":"296","severity":1,"message":"327","line":3,"column":27,"nodeType":"298","messageId":"299","endLine":3,"endColumn":33},{"ruleId":"296","severity":1,"message":"303","line":3,"column":35,"nodeType":"298","messageId":"299","endLine":3,"endColumn":41},{"ruleId":"296","severity":1,"message":"304","line":3,"column":43,"nodeType":"298","messageId":"299","endLine":3,"endColumn":48},{"ruleId":"296","severity":1,"message":"297","line":3,"column":50,"nodeType":"298","messageId":"299","endLine":3,"endColumn":54},{"ruleId":"296","severity":1,"message":"343","line":5,"column":25,"nodeType":"298","messageId":"299","endLine":5,"endColumn":40},{"ruleId":"296","severity":1,"message":"344","line":6,"column":10,"nodeType":"298","messageId":"299","endLine":6,"endColumn":20},{"ruleId":"296","severity":1,"message":"345","line":7,"column":10,"nodeType":"298","messageId":"299","endLine":7,"endColumn":14},{"ruleId":"296","severity":1,"message":"346","line":7,"column":16,"nodeType":"298","messageId":"299","endLine":7,"endColumn":25},{"ruleId":"296","severity":1,"message":"347","line":14,"column":8,"nodeType":"298","messageId":"299","endLine":14,"endColumn":18},{"ruleId":"296","severity":1,"message":"348","line":44,"column":10,"nodeType":"298","messageId":"299","endLine":44,"endColumn":18},{"ruleId":"296","severity":1,"message":"349","line":44,"column":20,"nodeType":"298","messageId":"299","endLine":44,"endColumn":31},{"ruleId":"296","severity":1,"message":"350","line":55,"column":10,"nodeType":"298","messageId":"299","endLine":55,"endColumn":25},{"ruleId":"296","severity":1,"message":"351","line":59,"column":17,"nodeType":"298","messageId":"299","endLine":59,"endColumn":25},{"ruleId":"296","severity":1,"message":"352","line":71,"column":9,"nodeType":"298","messageId":"299","endLine":71,"endColumn":20},{"ruleId":"296","severity":1,"message":"353","line":76,"column":12,"nodeType":"298","messageId":"299","endLine":76,"endColumn":17},{"ruleId":"308","severity":1,"message":"354","line":89,"column":6,"nodeType":"310","endLine":89,"endColumn":17,"suggestions":"355"},{"ruleId":"296","severity":1,"message":"356","line":135,"column":15,"nodeType":"298","messageId":"299","endLine":135,"endColumn":19},{"ruleId":"308","severity":1,"message":"357","line":166,"column":6,"nodeType":"310","endLine":166,"endColumn":16,"suggestions":"358"},{"ruleId":"308","severity":1,"message":"359","line":182,"column":6,"nodeType":"310","endLine":182,"endColumn":23,"suggestions":"360"},{"ruleId":"296","severity":1,"message":"361","line":3,"column":10,"nodeType":"298","messageId":"299","endLine":3,"endColumn":23},{"ruleId":"296","severity":1,"message":"343","line":3,"column":25,"nodeType":"298","messageId":"299","endLine":3,"endColumn":40},{"ruleId":"296","severity":1,"message":"362","line":11,"column":10,"nodeType":"298","messageId":"299","endLine":11,"endColumn":14},{"ruleId":"296","severity":1,"message":"361","line":4,"column":10,"nodeType":"298","messageId":"299","endLine":4,"endColumn":23},{"ruleId":"296","severity":1,"message":"343","line":4,"column":25,"nodeType":"298","messageId":"299","endLine":4,"endColumn":40},{"ruleId":"296","severity":1,"message":"345","line":5,"column":10,"nodeType":"298","messageId":"299","endLine":5,"endColumn":14},{"ruleId":"296","severity":1,"message":"346","line":5,"column":16,"nodeType":"298","messageId":"299","endLine":5,"endColumn":25},{"ruleId":"296","severity":1,"message":"344","line":6,"column":10,"nodeType":"298","messageId":"299","endLine":6,"endColumn":20},{"ruleId":"315","severity":1,"message":"316","line":72,"column":9,"nodeType":"317","endLine":78,"endColumn":10},{"ruleId":"315","severity":1,"message":"316","line":159,"column":9,"nodeType":"317","endLine":164,"endColumn":10},{"ruleId":"308","severity":1,"message":"363","line":220,"column":6,"nodeType":"310","endLine":220,"endColumn":16,"suggestions":"364"},{"ruleId":"296","severity":1,"message":"365","line":6,"column":8,"nodeType":"298","messageId":"299","endLine":6,"endColumn":22},{"ruleId":"296","severity":1,"message":"361","line":7,"column":10,"nodeType":"298","messageId":"299","endLine":7,"endColumn":23},{"ruleId":"296","severity":1,"message":"343","line":7,"column":25,"nodeType":"298","messageId":"299","endLine":7,"endColumn":40},{"ruleId":"308","severity":1,"message":"366","line":100,"column":6,"nodeType":"310","endLine":100,"endColumn":32,"suggestions":"367"},{"ruleId":"296","severity":1,"message":"325","line":2,"column":10,"nodeType":"298","messageId":"299","endLine":2,"endColumn":19},{"ruleId":"296","severity":1,"message":"368","line":3,"column":10,"nodeType":"298","messageId":"299","endLine":3,"endColumn":21},{"ruleId":"296","severity":1,"message":"340","line":5,"column":3,"nodeType":"298","messageId":"299","endLine":5,"endColumn":15},{"ruleId":"296","severity":1,"message":"331","line":8,"column":3,"nodeType":"298","messageId":"299","endLine":8,"endColumn":17},{"ruleId":"296","severity":1,"message":"369","line":10,"column":10,"nodeType":"298","messageId":"299","endLine":10,"endColumn":21},{"ruleId":"308","severity":1,"message":"370","line":67,"column":6,"nodeType":"310","endLine":67,"endColumn":24,"suggestions":"371"},{"ruleId":"308","severity":1,"message":"372","line":100,"column":6,"nodeType":"310","endLine":100,"endColumn":12,"suggestions":"373"},"no-native-reassign",["374"],"no-negated-in-lhs",["375"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'setPasswordOK' is assigned a value but never used.","'useReducer' is defined but never used.","'useRef' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'INFOSReducer' is defined but never used.","'isShowQuestion' is assigned a value but never used.","'setGrade' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkOptions'. Either include it or remove the dependency array.","ArrayExpression",["376"],"React Hook useEffect has missing dependencies: 'addINFO', 'question', and 'setShowQuestionSatus'. Either include them or remove the dependency array.",["377"],"'BsQuestion' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-redeclare","'jumpFromHere' is already defined.","redeclared","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'FaSpinner' is defined but never used.","'HashRouter' is defined but never used.","'Router' is defined but never used.","'BrowserRouter' is defined but never used.","'createQuestion' is defined but never used.","'updateQuestion' is defined but never used.","'deleteQuestion' is defined but never used.","'data' is defined but never used.",["374"],["375"],"'Editing' is defined but never used.","'passwordOK' is assigned a value but never used.","'question' is assigned a value but never used.","'setQuestion' is assigned a value but never used.","'useEffect' is defined but never used.","'getQuestions' is defined but never used.","'Rules' is defined but never used.","'Creators' is defined but never used.","'TransitionGroup' is defined but never used.","'AiFillEdit' is defined but never used.","'Fade' is defined but never used.","'Transform' is defined but never used.","'LoseScreen' is defined but never used.","'showInfo' is assigned a value but never used.","'setShowInfo' is assigned a value but never used.","'questionChanged' is assigned a value but never used.","'setINFOS' is assigned a value but never used.","'forceUpdate' is assigned a value but never used.","'state' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'rememberIndex'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setQuestion' needs the current value of 'rememberIndex'.",["378"],"'time' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkOptions', 'jump', 'questions.length', and 'rememberIndex'. Either include them or remove the dependency array.",["379"],"React Hook useEffect has missing dependencies: 'question' and 'questions.length'. Either include them or remove the dependency array.",["380"],"'CSSTransition' is defined but never used.","'show' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'determineArrowsNumber' and 'determineTextSmall'. Either include them or remove the dependency array.",["381"],"'ReactDOMServer' is defined but never used.","React Hook useEffect has a missing dependency: 'addNewPeriod'. Either include it or remove the dependency array.",["382"],"'useDispatch' is defined but never used.","'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'setQuestionInitialState'. Either include it or remove the dependency array. If 'setQuestionInitialState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["383"],"React Hook useEffect has missing dependencies: 'questionInitialState', 'questionToUpdate', 'questions', and 'setQuestionInitialState'. Either include them or remove the dependency array. If 'setQuestionInitialState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["384"],"no-global-assign","no-unsafe-negation",{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},{"desc":"389","fix":"390"},{"desc":"391","fix":"392"},{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},{"desc":"397","fix":"398"},{"desc":"399","fix":"400"},{"desc":"401","fix":"402"},"Update the dependencies array to be: [checkOptions, question]",{"range":"403","text":"404"},"Update the dependencies array to be: [addINFO, question, questionCounter, setShowQuestionSatus]",{"range":"405","text":"406"},"Update the dependencies array to be: [questions, rememberIndex]",{"range":"407","text":"408"},"Update the dependencies array to be: [checkOptions, jump, question, questions.length, rememberIndex]",{"range":"409","text":"410"},"Update the dependencies array to be: [question, questionCounter, questions.length]",{"range":"411","text":"412"},"Update the dependencies array to be: [determineArrowsNumber, determineTextSmall, question]",{"range":"413","text":"414"},"Update the dependencies array to be: [questionCounter, counter, addNewPeriod]",{"range":"415","text":"416"},"Update the dependencies array to be: [questionToUpdate, setQuestionInitialState]",{"range":"417","text":"418"},"Update the dependencies array to be: [line, questionInitialState, questionToUpdate, questions, setQuestionInitialState]",{"range":"419","text":"420"},[3265,3275],"[checkOptions, question]",[3484,3501],"[addINFO, question, questionCounter, setShowQuestionSatus]",[3332,3343],"[questions, rememberIndex]",[5665,5675],"[checkOptions, jump, question, questions.length, rememberIndex]",[6117,6134],"[question, questionCounter, questions.length]",[6886,6896],"[determineArrowsNumber, determineTextSmall, question]",[3243,3269],"[questionCounter, counter, addNewPeriod]",[2023,2041],"[questionToUpdate, setQuestionInitialState]",[2899,2905],"[line, questionInitialState, questionToUpdate, questions, setQuestionInitialState]"]